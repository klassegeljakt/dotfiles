"+----------------------------------------------------------------------------+
"|                  Author: Klas Segeljakt <klasseg@kth.se>                   |
"+----------------------------------------------------------------------------+
"* Load plugins
set nocompatible
set guioptions=
let maplocalleader = '-'
let mapleader      = '§'
call plug#begin('~/.vim/plugged')
source ~/.vim/plugins.vim
call plug#end()
source ~/.vim/private.vim
source ~/.vim/plugin-conf.vim
"* General settings
let g:author = 'Klas Segeljakt'
let g:email = 'klasseg@kth.se'
syntax enable
filetype plugin indent on       " Detect filetypes
colorscheme PaperColor | set background=light
set dict+=~/.vim/dict/basic
if has('gui_macvim')
  set viminfo='100,n~/.vim/viminfo
  set guiheadroom=60
  set maxmemtot=2000000         " Max mem for all buffers combined
  set maxmem=2000000            " Max mem for buffers
  set macthinstrokes            " Tighter font
el
  set viminfo='100,n~/.vim/nviminfo
en
set cmdheight=1
set autoread                    " Automatically read changes
set autowriteall                " Automatically write when changing file
set bufhidden=hide              " Delete buffer when closing window
set cindent                     " Automatic c indentation
set cinkeys-=0#,:               " Comments don't fiddle with indenting
set cinoptions=l1,c0,C0,\0      " Do not indent switch-cases
set concealcursor=              " Conceal only when on a different line
set conceallevel=0              " Replace concealed text with char, if any
set cpoptions-=aA               " Read and write shouldn't set #
set fileformats=unix,mac,dos    " Handle all, but prefer unix
set fileignorecase              " Always do the above
set fillchars=vert:\│           " Borders
set guicursor+=a:blinkon0       " Disable blinking
set scrolloff=0                 " Show at least X lines above/below cursor
set display=lastline            " Show as much as possible of paragraphs
syn sync minlines=256           " Less syntax lagging
set guifont=Fura\ Code\ Regular\ Nerd\ Font\ Complete:h13
set nomodeline                  " Do not detect modeline
set encoding=utf-8
set noswapfile                  " I've had enough of this
set hlsearch                    " Highlight matches of search
set ignorecase                  " Ignore case when searching
set incsearch                   " Highlight pattern while searching
set infercase                   " Adjust completion to match case
set laststatus=2                " Always show statusline
set lazyredraw                  " Do not redraw while executing macros
set linebreak                   " Break by word instead of char
set noshowmode                  " Do not bother showing current mode
set number                      " Row numbers
set pumheight=25                " Only show 25 completion items max
set showcmd                     " Show visual selection
set showfulltag                 " Show full tag when matching from tagfile
set showtabline=2               " Always show tabline
set spelllang=en_us             " We speak American
set splitright                  " Puts splits on right hand side
set signcolumn=yes              " Always show signcolumn
set tagcase=match               " Case-sensitive tag search
set notitle                     " Do not display title
set titleold=                   " Do not display title
set virtualedit=block           " Select whitespaces
set nowrap
set wildignore=*.class,*.o,*~,*.pyc,.git,*.lock,target,*.out
set wildignorecase              " Ignore case when completing filenames
set wildmenu                    " Tabcompletion for commandline
set wildcharm=<Tab>             " Allow macros to tabcomplete
set matchpairs=(:),{:},[:],<:>,":" " Separators
set shell=/usr/bin/zsh    " Shell program
" let &shell='/usr/local/bin/zsh -f'    " Shell program
set shellcmdflag=-c
set emoji                       " Emoji characters are full-width
set autochdir                   " Change directory to file in buffer !WARNING!
set ttyfast                     " Faster
set winminheight=0              " Squeeze win height
set winminwidth=0               " Squeeze win width
set backspace=2                 " Allow backspace over indent,eol,start
set expandtab                   " Expand tabs to spaces
set tabstop=2                   " Number of spaces per tab
set shiftwidth=2                " Number of spaces for each autoindent
set softtabstop=2               " ?
set shiftround                  " Indent to round number of spaces
set preserveindent              " Preserve indent structure
set undofile                    " Use persistent undo
set undodir=~/.vimundo          " Stored here
set undolevels=2000             " Max number of changes that can be undone
set foldmethod=expr             " manual,indent,expr,marker,syntax,diff
set foldnestmax=4
set updatetime=150              " Write to disk after 150 ms
set redrawtime=500             " timeout for 'hlsearch' and :match highlighting
set terse                       " Shorten messages
set belloff=all                 " STOP IT
"set verbose                    " Lengthen messages
set whichwrap=b,s,h,l           " Allow these keys to move past EOL
set nojoinspaces                " Insert only one space when joining
set shortmess=aoOstTWAIcF
set completeopt=noinsert,menuone,noselect,preview
set formatoptions=rownlj
set maxmempattern=2000000       " Max memory for pattern matching
set nrformats=alpha,octal,hex,bin
set selection=inclusive
"* Disabled plugins
let g:loaded_matchparen       = 1
let g:loaded_matchit          = 1
let g:loaded_tarPlugin        = 1
let g:loaded_tar              = 1
let g:loaded_zipPlugin        = 1
let g:loaded_zip              = 1
let g:loaded_gzip             = 1
let g:loaded_netrw            = 1
let g:loaded_netrwPlugin      = 1
let g:loaded_vimballPlugin    = 1
let g:loaded_vimball          = 1
let g:loaded_logiPat          = 1
let g:loaded_getscriptPlugin  = 1
let g:loaded_2html_plugin     = 1
let g:loaded_rrhelper         = 1
let g:loaded_spellfile_plugin = 1
let g:no_pdf_maps             = 1
"* Keybindings
" PhD
nno <silent> <Leader>d    :AsyncRun open dict://<cword><CR><CR>
" Plugins
nno          ´            /HEAD<CR>
nno          gfs          :GitGutterStageHunk<CR>
nno          gp           :GitGutterPreviewHunk<CR>
nno <expr>   q            &ma?':TComment<CR>':''
vno <expr>   q            &ma?mode()==#'V'?':TComment<CR>':':TCommentInline<CR>':''
nno <silent> gb           :Gbrowse<CR>
nno <silent> <C-p>        :Rg<CR>
nno <silent> <C-u>        :History<CR>
nno <silent> ı            :GitFiles<CR>|                    " <C-i>
nno <silent> Ö            :ArgWrap<CR>
nno <silent> Å            :Bdelete!<CR>
nno <silent> ü            :PlugUpdate<CR>|                  " <M-u>
nno <silent> <C-H>        :SidewaysLeft<CR>
nno <silent> <C-L>        :SidewaysRight<CR>
nno <silent> <F5>         :UndotreeToggle<CR>
" nno <expr>   <C-o>        ':ALEDetail<CR><C-w> '.(&columns < 160? 'K':'L')
" nno <silent> <C-o>        :ALEDetail<CR>
nno <silent> →            :call ToggleDrawIt()<CR>
no  <silent> <C-w>m       :WinResizerStartMove<CR>
xno <silent> <expr> ?     mode()=~'V' ? ':Tabularize' : '?'
nm <nowait><buffer> <C-c> <Plug>(VM-Reset)
" nm  <silent> <C-x>        <Plug>Stealth
nm  <silent> t            <Plug>(coc-definition)
nno <silent> <C-t>        <C-^>
" nm  <silent> gx           <Plug>(coc-openlink)
ino <silent> <C-p>        \|> |                            " OCAML
ino <silent> ˆ            \| |                             " <M-S-i>
ino <silent> <C-x>        <C-c>:IsotopeInsert DOUBLE_STRUCK<CR>a
nno <silent> K            :call CocAction('doHover')<CR>
nno <silent> ⁄            :call CocAction('fold')<CR>|     " <D-z>
nno <silent> +            :call CocAction('format')<CR>
nno <silent> ca           :CocAction<CR>
nno <silent> cd           :CocFix<CR>
nm  <silent> ;            <Plug>(coc-range-select)
xm  <silent> ;            <Plug>(coc-range-select)
nm  <silent> :            <Plug>(coc-range-select-backward)
xm  <silent> :            <Plug>(coc-range-select-backward)
nno <silent> -            :noa w<CR>
nm           gm           <Plug>(git-messenger)
nm           Ω            <Plug>(coc-refactor)|            " <D-w>
nm           É            <Plug>(coc-references)|          " <D-e>
nm           √            <Plug>(coc-rename)|              " <D-r>
vm           √            <Plug>NameAssign|                " <D-r>
nm           Θ            <Plug>(coc-declaration)|         " <D-t>
nm           Ü            <Plug>(coc-type-definition)|     " <D-u>
nm           ˆ            <Plug>(coc-implementation)|      " <D-i>
nm           Σ            <Plug>(coc-format-selected)|     " <D-s>
nm           ◊            <Plug>(coc-codeaction)|          " <D-a>
vm           ◊            <Plug>(coc-codeaction-selected)| " <D-a>
nm           Δ            <Plug>(coc-format-selected)|     " <D-d>
vm           Δ            <Plug>(coc-format-selected)|     " <D-d>
nm           M            <Plug>(coc-fix-current)
nm           Λ            <Plug>(coc-codelens-action)|     " <D-l>
nno          “            :CocCommand document.jumpToNextSymbol<CR>| "<S-C-n>"
nno          ”            :CocCommand document.jumpToPrevSymbol<CR>| "<S-C-b>"
nno          Ç            :CocCommand editor.action.organizeImport<CR>| "<D-c>"
nno          Φ            :CocList outline<CR>|            " <D-o>
nno          »            :CocRestart<CR>              " <D-b>
xm           if           <Plug>(coc-funcobj-i)
xm           af           <Plug>(coc-funcobj-a)
om           if           <Plug>(coc-funcobj-i)
om           af           <Plug>(coc-funcobj-a)
xm <silent> <TAB>         <Plug>(coc-range-select)
ino <silent><expr> <C-Space> coc#refresh()
" ino <silent><expr> <CR> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
ino <silent><expr> <CR> pumvisible() ?
      \ coc#_select_confirm() :
      \ "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
ino <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
ino <silent><expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
nno <silent> K :call <SID>show_documentation()<CR>
" nm           Ä            
vm  <silent> H            <Plug>SchleppLeft
vm  <silent> J            <Plug>SchleppDown
vm  <silent> K            <Plug>SchleppUp
vm  <silent> L            <Plug>SchleppRight
vm  <silent> D            <Plug>SchleppDup
nm  <silent> <C-k>        <Plug>(coc-diagnostic-prev)
nm  <silent> <C-j>        <Plug>(coc-diagnostic-next)
" nm  <silent> K            <Plug>ManPreGetPage<CR>
nno <silent> gh           :GitGutterLineHighlightsToggle<CR>| " <M-g>
nm  <silent> ƒ            <Plug>(GitGutterFold)|                 " <M-f>
nm  <silent> ¬            <Plug>(GitGutterNextHunk)|             " <D-j>
nm  <silent> º            <Plug>(GitGutterPrevHunk)|             " <D-k>
nm  <silent> Γ            <Plug>(GitGutterStageHunk)|            " <D-g>
nm  <silent> ˘            <Plug>(GitGutterPreviewHunk)|          " <D-h>
nm  <silent> gu           <Plug>(GitGutterUndoHunk)
nm  <silent> ö            <Plug>(choosewin)|                     " <C-d>
im  <BS>                  <Plug>(PearTreeBackspace)
im  <CR>                  <Plug>(PearTreeExpand)
im  <Esc>                 <Plug>(PearTreeFinishExpansion)
im  <C-c>                 <Plug>(PearTreeFinishExpansion)
im  <C-e>                 <Plug>(PearTreeJump)
" nm           <C-e>        <Plug>(SmoothieDownwards)
" nm           E            <Plug>(SmoothieUpwards)
map <silent> w            <Plug>CamelCaseMotion_w
map <silent> b            <Plug>CamelCaseMotion_b
map <silent> e            <Plug>CamelCaseMotion_e
map <silent> ge           <Plug>CamelCaseMotion_ge
sunm         w
sunm         b
sunm         e
sunm         ge
" Fixes
nno          <C-q>        q|                                " Record with <C-q>
nno          n            nzz
nno          N            Nzz
nno          R            gR
nno <expr>   <Tab>        col('$') == 1? 'i<Tab>' : '>>'
nno          <S-Tab>      <<
vno          <Tab>        >gv
vno          <S-Tab>      <gv
vno <expr>   A            mode()=~'v' ? '$h' : 'A'
vno          P            "_dp|                             " No yank on paste
vno          p            "_dP
vno          <BS>         <BS>|                             " Fix defaults
nno          <C-c>        <Esc>
nno          gn           :cnext<CR>
nno          gN           :cNext<CR>
" nno <silent> <C-o>        :bp<CR>
" Overrides
nno          D            "Add                              " 
nno          B            ^|                                " Go to start of line
no           E            <C-y>|                            " Scroll up
no           <Space>      :
ino          <C-h>        <Left>|                           " Move in insert mode
ino          <C-j>        <Down>
ino          <C-k>        <Up>
ino          <C-l>        <Right>
no           !            :!
no           <C-d>        :x<CR>
nno          S            :%s//g<Left><Left>
nno <expr>   C            ':%s/'.@/.'//g<Left><Left>'
xno <expr>   C            ':s/'.@/.'//g<Left><Left>'
nno          <C-n>        gt|                               " Tab page management
nno          <C-b>        gT|
nno          gt           :tabnew<CR>
nno          <C-CR>       kk<CR>|                           " Reverse <CR>
nno <silent> k            gk
nno <silent> j            gj
nno          <C-f>        vapkJVgqo<Esc>|                   " Reformat paragraph
" Disabled
cno          <Up>         <Nop>
cno          <Down>       <Nop>
cno          <Left>       <Nop>
cno          <Right>      <Nop>
nno          <Right>      i<Right>
nno          <Left>       i<Left>
nno          <Up>         i<Up>
nno          <Down>       i<Down>
" Command line
cno          <C-c>        <C-u><C-c>
cno          <C-h>        <Left>
cno          <C-l>        <Right>
cno          <C-k>        <Up>
cno          <C-j>        <Down>
cno          <C-b>        <S-Left><Left>
cno          <C-e>        <S-Right>
cno          <C-v>        <C-r><C-l>
cno          <C-f>        <C-\>e
" Toggles / Sliders
nno <silent> <Leader>b    :set ri!<CR>|                     " Write backwards
nno <silent> <Leader>dd   :set diff!<CR>|                   " Diff mode
nno <silent> <Leader>l    :set cursorbind! scrollbind!<CR>  " Bind cursor/scroll
" nno <silent> Θ            :set wrap!<CR>|                   " <M-O>
" Shortcuts
" ino          <C-z>        \                                 " <C-f>
" vno          <C-y>        ygvr<Space>|                      " Yank & clear
nno          cu           gg=G``|                           " Format file
nno          gl           <C-w>TgT|                         " Move to new tab
" Commands
nno <silent> cn           :cn<CR>
nno <silent> cN           :cN<CR>
nno <silent> å            :x<CR>
nno <silent> ä            :%s/\s\+$//e<CR>|                 " Remove whitespaces
nno <silent> cd           :cd %:p:h<CR>:Nnn<CR>|            " Change directory
nno <silent> <D-i>        :terminal ++close<CR>|            " Terminal
nno <silent> <D-b>        :!cargo build<CR>                 " Cargo
nno <silent> <D-r>        :!cargo run<CR>
nno <silent> <D-c>        :!cargo clean<CR>
nno <silent> <D-d>        :!cargo doc --open<CR>
nno <silent> <D-f>        :!cargo test<CR>
nno <silent> <D-e>        :!cargo search 
nno <silent> <D-x>        :!cargo check<CR>
nno <silent> <D-z>        :!cargo bench<CR>
" Macros
nno          ®            <C-q>|                            " <M-r>
nno          ©            @1|                               " <M-1>
" File shortcuts
nno <silent> ∏            :CocConfig<CR>|                                " <M-P>
nno <silent> π            :tab drop ~/.vim/plugins.vim<CR>|              " <M-p>
nno <silent> ⊢            :tab drop ~/.vim/vimrc<CR>|                    " <M-ä>
nno <silent> Æ            :tab drop ~/.gvimrc<CR>|                       " <M-Ä>
nno <silent> θ            :tab drop ~/.vim/plugin-conf.vim<CR>|          " <M-o>
nno <silent> ø            :tab drop ~/.vim/bibtex/library.bib<CR>|       " <M-ö>
" nno <silent> φ            :AsyncRun open https://www.kth.se/en/kthb<CR>| " <M-v>
nno <silent> β            :AsyncRun open https://scholar.google.se<CR>|  " <M-b>
"* Syntax
hi ColorColumn ctermfg=Red guibg=lightred
" hi StatusLine gctermfg= uifg=#F5F5F5
" hi StatusLineNC ctermfg=1 guifg=#F5F5F5
" "** Keywords
" " TODO DANGER ERROR WARNING Klas Segeljakt <klasseg@kth.se> [2017-10-21 01:26]
" hi _TODO    ctermfg=grey guibg=#95bc0a guifg=black
" hi _DANGER  ctermfg=grey guibg=#dd8225 guifg=black
" hi _ERR     ctermfg=grey guibg=#ea1822 guifg=black
" hi _WARNING ctermfg=grey guibg=#f1d200 guifg=black gui=underline,italic
" hi _AUTHOR  ctermfg=grey guifg=#95bc0a gui=italic
" hi _EMAIL   ctermfg=grey guifg=#95bc0a gui=underline,italic
" hi _DATE    ctermfg=grey guifg=#1d829e
" hi _COMMENT ctermfg=grey guifg=#928374 gui=NONE
" syn keyword _TODO    TODO NOTE containedin=.*Comment.*
" syn keyword _DANGER  DANGER    containedin=.*Comment.*
" syn keyword _WARNING WARNING   containedin=.*Comment.*
" syn keyword _ERR     ERROR     containedin=.*Comment.*
" exe 'syn keyword _AUTHOR '.g:author.' containedin=.*Comment.*'
" syn match _EMAIL /<*[a-zA-Z]\+@[a-zA-Z]\+\.[a-zA-Z]\+>*/            containedin=.*Comment.*
" syn match _DATE  /\[[0-9?]\+-[0-9?]\+-[0-9?]\+ [0-9?]\+:[0-9?]\+\]/ containedin=.*Comment.*
hi ALEError ctermbg=210
hi ALEInfo ctermbg=200
hi ALEWarning ctermbg=216
hi link ALEErrorSign ALEError
hi link ALEInfoSign ALEInfo
hi link ALEWarningSign ALEInfo

hi CocError ctermbg=210
hi CocWarning ctermbg=216
hi CocInfo ctermbg=200
hi CocHint ctermbg=226 cterm=italic
hi Pmenu ctermbg=253 ctermfg=16

hi link CocErrorHighlight CocError
hi link CocWarningHighlight CocWarning
hi link CocInfoHighlight CocInfo
hi link CocHintHighlight CocHint

hi link CocErrorSign CocError
hi link CocWarningSign CocWarning
hi link CocInfoSign CocInfo
hi link CocHintSign CocHint

hi link CocErrorVirtualText CocError
hi link CocWarningVirtualText CocWarning
hi link CocInfoVirtualText CocInfo
hi link CocHintVirtualText CocHint



" hi link CocErrorFloat CocError
" hi link CocWarningFloat Pmenu
" hi link CocInfoFloat Pmenu
" hi link CocHintFloat Pmenu
"* Autocmd
aug Autocommands | au!
  au BufReadPost .vimrc set nowrap
"   au focusLost * silent! wall
  au Syntax * match none
  au Syntax rust match ColorColumn /\%>120v.\+/
  au Syntax c,cpp,vim match ColorColumn /\%>80v.\+/
  au BufReadPost * silent! norm! g`"
  au TabLeave * silent! w
  au StdinReadPre * silent let s:std_in=1
  au VimEnter,BufWinEnter *
    \ if !exists('t:startify_new_tab')
    \ && !exists('t:goyo_master')
    \ && empty(expand('%'))
    \ && empty(&l:buftype)
    \ && &l:modifiable
    \ |   let t:startify_new_tab = 1
    \ |   Startify
    \ | endif
  au BufRead,BufNewFile *.lalrpop set syntax=rust
  au BufRead,BufNewFile *.sbt set filetype=scala
  au BufRead,BufNewFile *.arc-script set filetype=arc-script
  au BufRead,BufNewFile *.tower-lsp set filetype=tower-lsp
  au BufRead,BufNewFile .psqlrc set filetype=sql
  au BufWinEnter * if &previewwindow | wincmd L | en
  au User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  au CursorHold * silent call CocActionAsync('highlight')
aug END
"* Spell correction / Abbreviations
iab    retrun return
iab     pritn print
iab       teh the
iab      liek like
iab  liekwise likewise
iab      moer more
iab  previosu previous
iab      pset pest
"* Scripts
function! FloatScroll(forward) abort
  let float = coc#util#get_float()
  if !float | return '' | endif
  let buf = nvim_win_get_buf(float)
  let buf_height = nvim_buf_line_count(buf)
  let win_height = nvim_win_get_height(float)
  if buf_height < win_height | return '' | endif
  let pos = nvim_win_get_cursor(float)
  if a:forward
    if pos[0] == 1
      let pos[0] += 3 * win_height / 4
    elseif pos[0] + win_height / 2 + 1 < buf_height
      let pos[0] += win_height / 2 + 1
    else
      let pos[0] = buf_height
    endif
  else
    if pos[0] == buf_height
      let pos[0] -= 3 * win_height / 4
    elseif pos[0] - win_height / 2 + 1  > 1
      let pos[0] -= win_height / 2 + 1
    else
      let pos[0] = 1
    endif
  endif
  call nvim_win_set_cursor(float, pos)
  return ''
endfunction

nno <silent><expr> <down> coc#util#has_float() ? FloatScroll(1) : "\<down>"
nno <silent><expr>  <up>  coc#util#has_float() ? FloatScroll(0) : "\<up>"

fun! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfun

fun! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfun

function! SynStack()
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" if &term =~ "xterm"
    " SecureCRT versions prior to 6.1.x do not support 4-digit DECSET
    "     let &t_ti = "\<Esc>[?1049h"
    "     let &t_te = "\<Esc>[?1049l"
    " Use 2-digit DECSET instead
set t_ti="\<Esc>[?47h"
set t_te="\<Esc>[?47l"
" endif
