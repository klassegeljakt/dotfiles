"+----------------------------------------------------------------------------+
"|                  Author: Klas Segeljakt <klasseg@kth.se>                   |
"+----------------------------------------------------------------------------+
"
"
nno <nowait><expr> ν coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nno <nowait><expr> μ coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
nm <nowait><buffer> <C-c> <Plug>(VM-Reset)
" ino <silent><expr> <CR> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
ino <silent><expr> <CR> pumvisible() ?
      \ coc#_select_confirm() :
      \ "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
ino <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
ino <silent><expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" nno <silent> K :call <SID>show_documentation()<CR>
" nm           Ä            
vm  <silent> H            <Plug>SchleppLeft
vm  <silent> J            <Plug>SchleppDown
vm  <silent> K            <Plug>SchleppUp
vm  <silent> L            <Plug>SchleppRight
vm  <silent> D            <Plug>SchleppDup
nm  <silent> <C-k>        <Plug>(coc-diagnostic-prev)
nm  <silent> <C-j>        <Plug>(coc-diagnostic-next)
" nno <silent> <C-k>        :silent! CocNext<CR>
" nno <silent> <C-j>        :silent! CocPrev<CR>
" nm  <silent> K            <Plug>ManPreGetPage<CR>
nno <silent> gh           :GitGutterLineHighlightsToggle<CR>| " <M-g>
nm  <silent> ƒ            <Plug>(GitGutterFold)|                 " <M-f>
nno <silent> ¬            :GitGutterNextHunk<CR>zz|              " <D-j>
nno <silent> º            :GitGutterPrevHunk<CR>zz|              " <D-k>
nm  <silent> Γ            <Plug>(GitGutterStageHunk)|            " <D-g>
nm  <silent> ˘            <Plug>(GitGutterPreviewHunk)|          " <D-h>
nm  <silent> gu           <Plug>(GitGutterUndoHunk)
nm  <silent> ö            <Plug>(choosewin)|                     " <C-d>
im  <BS>                  <Plug>(PearTreeBackspace)
im  <CR>                  <Plug>(PearTreeExpand)
im  <Esc>                 <Plug>(PearTreeFinishExpansion)
im  <C-c>                 <Plug>(PearTreeFinishExpansion)
im  <C-e>                 <Plug>(PearTreeJump)
" nm           <C-e>        <Plug>(SmoothieDownwards)
" nm           E            <Plug>(SmoothieUpwards)
map <silent> w            <Plug>CamelCaseMotion_w
map <silent> b            <Plug>CamelCaseMotion_b
map <silent> e            <Plug>CamelCaseMotion_e
map <silent> ge           <Plug>CamelCaseMotion_ge
" vno <silent> Ç            :Oscyank<CR>| " <D-S-c>
vno <silent> Ç            +y| " <D-S-c>
sunm         w
sunm         b
sunm         e
sunm         ge
" Fixes
nno          <C-q>        q|                                " Record with <C-q>
nno          n            nzz
nno          N            Nzz
nno          R            gR
nno <expr>   <Tab>        col('$') == 1? 'i<Tab>' : '>>'
nno          <S-Tab>      <<
vno          <Tab>        >gv
vno          <S-Tab>      <gv
vno <expr>   A            mode()=~'v' ? '$h' : 'A'
vno          P            "_dp|                             " No yank on paste
vno          p            "_dP
vno          <BS>         <BS>|                             " Fix defaults
nno          <C-c>        <Esc>
nno          gn           :cnext<CR>
nno          gN           :cNext<CR>
" nno <silent> <C-o>        :bp<CR>
" Overrides
nno          D            "Add                              " 
nno          B            ^|                                " Go to start of line
no           E            <C-y>|                            " Scroll up
no           <Space>      :
ino          <C-h>        <Left>|                           " Move in insert mode
ino          <C-j>        <Down>
ino          <C-k>        <Up>
ino          <C-l>        <Right>
no           !            :!
no           <C-d>        :x<CR>
nno          S            :%s//g<Left><Left>
nno <expr>   C            ':%s/'.@/.'//g<Left><Left>'
xno <expr>   C            ':s/'.@/.'//g<Left><Left>'
nno          <C-n>        gt|                               " Tab page management
nno          <C-b>        gT|
nno          gt           :tabnew<CR>
nno          gj           :bnext<CR>
nno          <C-CR>       kk<CR>|                           " Reverse <CR>
" nno <silent> k            gk
" nno <silent> j            gj
nno          <C-f>        vapkJVgqo<Esc>|                   " Reformat paragraph
" Disabled
cno          <Up>         <Nop>
cno          <Down>       <Nop>
cno          <Left>       <Nop>
cno          <Right>      <Nop>
nno          <Right>      i<Right>
nno          <Left>       i<Left>
nno          <Up>         i<Up>
nno          <Down>       i<Down>
" Command line
cno          <C-c>        <C-u><C-c>
cno          <C-h>        <Left>
cno          <C-l>        <Right>
cno          <C-k>        <Up>
cno          <C-j>        <Down>
cno          <C-b>        <S-Left><Left>
cno          <C-e>        <S-Right>
cno          <C-v>        <C-r><C-l>
cno          <C-f>        <C-\>e
" Toggles / Sliders
nno <silent> <Leader>b    :set ri!<CR>|                     " Write backwards
nno <silent> <Leader>dd   :set diff!<CR>|                   " Diff mode
nno <silent> <Leader>l    :set cursorbind! scrollbind!<CR>  " Bind cursor/scroll
" nno <silent> Θ            :set wrap!<CR>|                   " <M-O>
" Shortcuts
" ino          <C-z>        \                                 " <C-f>
" vno          <C-y>        ygvr<Space>|                      " Yank & clear
nno          cu           gg=G``|                           " Format file
nno          gl           <C-w>TgT|                         " Move to new tab
" Commands
nno <silent> cn           :cn<CR>
nno <silent> cN           :cN<CR>
nno <silent> å            :x<CR>
nno <silent> ä            :%s/\s\+$//e<CR>|                 " Remove whitespaces
nno <silent> <D-i>        :terminal ++close<CR>|            " Terminal
nno <silent> <D-b>        :!cargo build<CR>                 " Cargo
nno <silent> <D-r>        :!cargo run<CR>
nno <silent> <D-c>        :!cargo clean<CR>
nno <silent> <D-d>        :!cargo doc --open<CR>
nno <silent> <D-f>        :!cargo test<CR>
nno <silent> <D-e>        :!cargo search 
nno <silent> <D-x>        :!cargo check<CR>
nno <silent> <D-z>        :!cargo bench<CR>
" Macros
nno          ®            <C-q>|                            " <M-r>
nno          ©            @1|                               " <M-1>
" File shortcuts
nno <silent> ∏            :CocConfig<CR>|                                " <M-P>
nno <silent> π            :tab drop ~/.vim/plugins.vim<CR>|              " <M-p>
nno <silent> ⊢            :tab drop ~/.vim/vimrc<CR>|                    " <M-ä>
nno <silent> Æ            :tab drop ~/.gvimrc<CR>|                       " <M-Ä>
nno <silent> θ            :tab drop ~/.vim/plugin-conf.vim<CR>|          " <M-o>
nno <silent> ø            :tab drop ~/.vim/bibtex/library.bib<CR>|       " <M-ö>
" nno <silent> φ            :AsyncRun open https://www.kth.se/en/kthb<CR>| " <M-v>
nno <silent> β            :AsyncRun open https://scholar.google.se<CR>|  " <M-b>
"* Syntax
hi ColorColumn ctermfg=Red guibg=lightred
" hi StatusLine gctermfg= uifg=#F5F5F5
" hi StatusLineNC ctermfg=1 guifg=#F5F5F5
" "** Keywords
" " TODO DANGER ERROR WARNING Klas Segeljakt <klasseg@kth.se> [2017-10-21 01:26]
" hi _TODO    ctermfg=grey guibg=#95bc0a guifg=black
" hi _DANGER  ctermfg=grey guibg=#dd8225 guifg=black
" hi _ERR     ctermfg=grey guibg=#ea1822 guifg=black
" hi _WARNING ctermfg=grey guibg=#f1d200 guifg=black gui=underline,italic
" hi _AUTHOR  ctermfg=grey guifg=#95bc0a gui=italic
" hi _EMAIL   ctermfg=grey guifg=#95bc0a gui=underline,italic
" hi _DATE    ctermfg=grey guifg=#1d829e
" hi _COMMENT ctermfg=grey guifg=#928374 gui=NONE
" syn keyword _TODO    TODO NOTE containedin=.*Comment.*
" syn keyword _DANGER  DANGER    containedin=.*Comment.*
" syn keyword _WARNING WARNING   containedin=.*Comment.*
" syn keyword _ERR     ERROR     containedin=.*Comment.*
" exe 'syn keyword _AUTHOR '.g:author.' containedin=.*Comment.*'
" syn match _EMAIL /<*[a-zA-Z]\+@[a-zA-Z]\+\.[a-zA-Z]\+>*/            containedin=.*Comment.*
" syn match _DATE  /\[[0-9?]\+-[0-9?]\+-[0-9?]\+ [0-9?]\+:[0-9?]\+\]/ containedin=.*Comment.*
hi ALEError ctermbg=210
hi ALEInfo ctermbg=200
hi ALEWarning ctermbg=216
hi link ALEErrorSign ALEError
hi link ALEInfoSign ALEInfo
hi link ALEWarningSign ALEInfo

hi CocError ctermbg=210
hi CocWarning ctermbg=216
hi CocInfo ctermbg=200
hi CocHint ctermbg=226 cterm=italic
hi Pmenu ctermbg=253 ctermfg=16

hi link CocErrorLine CocError
hi link CocWarningLine CocWarning
hi link CocInfoLine CocInfo
hi link CocHintLine CocHint

hi link CocErrorHighlight CocError
hi link CocWarningHighlight CocWarning
hi link CocInfoHighlight CocInfo
hi link CocHintHighlight CocHint

hi link CocErrorSign CocError
hi link CocWarningSign CocWarning
hi link CocInfoSign CocInfo
hi link CocHintSign CocHint

hi link CocErrorVirtualText CocError
hi link CocWarningVirtualText CocWarning
hi link CocInfoVirtualText CocInfo
hi link CocHintVirtualText CocHint

hi link CocFloating CocError
hi link CocErrorFloat CocError
hi link CocWarningFloat CocWarning
hi link CocInfoFloat CocInfo
hi link CocHintFloat CocHint

"* Autocmd
aug Autocommands | au!
  au BufReadPost *
        \ if line("'\"") > 1
        \ && line("'\"") <= line("$")
        \ | exe "normal! g'\""
        \ | en
  au BufReadPost .vimrc set nowrap
"   au focusLost * silent! wall
  au Syntax * match none
  au Syntax rust match ColorColumn /\%>120v.\+/
  au Syntax c,cpp,vim match ColorColumn /\%>80v.\+/
  au BufReadPost * silent! norm! g`"
  au TabLeave * silent! w
  au StdinReadPre * silent let s:std_in=1
  au VimEnter,BufWinEnter *
    \ if !exists('t:startify_new_tab')
    \ && !exists('t:goyo_master')
    \ && empty(expand('%'))
    \ && empty(&l:buftype)
    \ && !&previewwindow
    \ && &l:modifiable
    \ |   let t:startify_new_tab = 1
    \ |   Startify
    \ | en
  au BufRead,BufNewFile *.mlir set filetype=mlir syntax=llvm
  au BufRead,BufNewFile *.lalrpop set syntax=rust
  au BufRead,BufNewFile *.sbt set filetype=scala
  au BufRead,BufNewFile *.arc set filetype=arc
  au BufRead,BufNewFile *.tex set filetype=tex
  au BufRead,BufNewFile .psqlrc set filetype=sql
  au BufWinEnter * if &previewwindow | wincmd L | en
  au User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  au CursorHold * silent call CocActionAsync('highlight')
  au BufEnter * silent! lcd %:p:h
aug END
"* Spell correction / Abbreviations
iab    retrun return
iab     pritn print
iab       teh the
iab      liek like
iab  liekwise likewise
iab      moer more
iab  previosu previous
iab      pset pest
"* Scripts
function! FloatScroll(forward) abort
  let float = coc#util#get_float()
  if !float | return '' | en
  let buf = nvim_win_get_buf(float)
  let buf_height = nvim_buf_line_count(buf)
  let win_height = nvim_win_get_height(float)
  if buf_height < win_height | return '' | en
  let pos = nvim_win_get_cursor(float)
  if a:forward
    if pos[0] == 1
      let pos[0] += 3 * win_height / 4
    elseif pos[0] + win_height / 2 + 1 < buf_height
      let pos[0] += win_height / 2 + 1
    el
      let pos[0] = buf_height
    en
  el
    if pos[0] == buf_height
      let pos[0] -= 3 * win_height / 4
    elseif pos[0] - win_height / 2 + 1  > 1
      let pos[0] -= win_height / 2 + 1
    el
      let pos[0] = 1
    en
  en
  call nvim_win_set_cursor(float, pos)
  return ''
endfunction

" nno <silent><expr> <down> coc#util#has_float() ? FloatScroll(1) : "\<down>"
" nno <silent><expr>  <up>  coc#util#has_float() ? FloatScroll(0) : "\<up>"

fun! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfun

fun! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  el
    execute '!' . &keywordprg . " " . expand('<cword>')
  en
endfun

function! SynStack()
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" if &term =~ "xterm"
    " SecureCRT versions prior to 6.1.x do not support 4-digit DECSET
    "     let &t_ti = "\<Esc>[?1049h"
    "     let &t_te = "\<Esc>[?1049l"
    " Use 2-digit DECSET instead
set t_ti="\<Esc>[?47h"
set t_te="\<Esc>[?47l"
" en

fun! SynStack()
  if !exists("*synstack")
    return
  en
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfun

fun! GoBackToRecentBuffer()
  let startName = bufname('%')
  while 1
    exe "normal! \<c-o>"
    let nowName = bufname('%')
    if nowName != startName
      break
    en
  endwhile
endfun
