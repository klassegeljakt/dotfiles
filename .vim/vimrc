"+----------------------------------------------------------------------------+
"|                  Author: Klas Segeljakt <klasseg@kth.se>                   |
"+----------------------------------------------------------------------------+
"* Load plugins
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
set nocp                        " Always do this first
set guioptions=
let maplocalleader = ","
let mapleader = "§"
call plug#begin('~/.vim/plugged')
source ~/.vim/plugins.vim
call plug#end()
source ~/.vim/private.vim
source ~/.vim/plugin-conf.vim
"* General settings
let g:author = "Klas Segeljakt"
let g:email = "klasseg@kth.se"
syntax enable
filetype plugin indent on       " Detect filetypes
colorscheme PaperColor | set background=light
set dict+=~/.vim/dict/basic
if has("gui_macvim")
  set viminfo='100,n~/.vim/viminfo
el
  set viminfo='100,n~/.vim/nviminfo
en
set autoread                    " Automatically read changes
set autowriteall                " Automatically write when changing file
set bufhidden=hide              " Delete buffer when closing window
set cindent                     " Automatic c indentation
set cinkeys-=0#,:               " Comments don't fiddle with indenting
set cinoptions=l1,c0,C0,\0      " Do not indent switch-cases
set concealcursor=              " Conceal only when on a different line
set conceallevel=2              " Replace concealed text with char, if any
set cpoptions-=aA               " Read and write shouldn't set #
set fileformats=unix,mac,dos    " Handle all, but prefer unix
set fileignorecase              " Always do the above
set fillchars=vert:\│           " Borders
set guicursor+=a:blinkon0       " Disable blinking
set scrolloff=0                 " Show at least X lines above/below cursor
set display=lastline            " Show as much as possible of paragraphs
syn sync minlines=256           " Less syntax lagging
set guifont=Fura\ Code\ Regular\ Nerd\ Font\ Complete:h13
set nomodeline                  " Do not detect modeline
set encoding=utf-8
set noswapfile                  " I've had enough of this
set hlsearch                    " Highlight matches of search
set ignorecase                  " Ignore case when searching
set incsearch                   " Highlight pattern while searching
set infercase                   " Adjust completion to match case
set laststatus=2                " Always show statusline
set lazyredraw                  " Do not redraw while executing macros
set linebreak                   " Break by word instead of char
set noshowmode                  " Do not bother showing current mode
set number                      " Row numbers
set pumheight=25                " Only show 25 completion items max
set showcmd                     " Show visual selection
set showfulltag                 " Show full tag when matching from tagfile
set showtabline=2               " Always show tabline
set spelllang=en_us             " We speak American
set splitright                  " Puts splits on right hand side
set tagcase=match               " Case-sensitive tag search
set notitle                     " Do not display title
set titleold=                   " Do not display title
set virtualedit=block           " Select whitespaces
set wildignore=*.class,*.o,*~,*.pyc,.git,*.lock,target,*.out
set wildignorecase              " Ignore case when completing filenames
set wildmenu                    " Tabcompletion for commandline
set wildcharm=<Tab>             " Allow macros to tabcomplete
set matchpairs=(:),{:},[:],<:>,":" " Separators
set shell=/usr/local/bin/zsh    " Shell program
" let &shell="/usr/local/bin/zsh -f"    " Shell program
set shellcmdflag=-c
set emoji                       " Emoji characters are full-width
set autochdir                   " Change directory to file in buffer !WARNING!
set ttyfast                     " Faster
set winminheight=0              " Squeeze win height
set winminwidth=0               " Squeeze win width
set backspace=2                 " Allow backspace over indent,eol,start
set expandtab                   " Expand tabs to spaces
set tabstop=2                   " Number of spaces per tab
set shiftwidth=2                " Number of spaces for each autoindent
set softtabstop=2               " ?
set shiftround                  " Indent to round number of spaces
set preserveindent              " Preserve indent structure
set undofile                    " Use persistent undo
set undodir=~/.vimundo          " Stored here
set undolevels=2000             " Max number of changes that can be undone
set foldmethod=expr             " manual,indent,expr,marker,syntax,diff
set foldexpr=MyFoldExpr()       " Custom folding expression
set foldnestmax=4
set foldtext=FoldText()
set updatetime=250              " Write to disk after 250 ms
set redrawtime=1000             " timeout for 'hlsearch' and :match highlighting
set terse                       " Shorten messages
set belloff=all                 " STOP IT
"set verbose                    " Lengthen messages
set whichwrap=b,s,h,l           " Allow these keys to move past EOL
set nojoinspaces                " Insert only one space when joining
set shortmess=aoOstTWAIcF
set completeopt=noinsert,menuone,noselect
set formatoptions=rownlj
set maxmempattern=2000000       " Max memory for pattern matching
" Macvim specifics
if has("gui_macvim")
  set guiheadroom=60
  set maxmemtot=2000000         " Max mem for all buffers combined
  set maxmem=2000000            " Max mem for buffers
  set macthinstrokes            " Tighter font
endif
"* Disabled plugins
let g:loaded_matchparen       = 1
let g:loaded_matchit          = 1
let g:loaded_tarPlugin        = 1
let g:loaded_tar              = 1
let g:loaded_zipPlugin        = 1
let g:loaded_zip              = 1
let g:loaded_gzip             = 1
" let g:loaded_netrw            = 1
" let g:loaded_netrwPlugin      = 1
let g:loaded_vimballPlugin    = 1
let g:loaded_vimball          = 1
let g:loaded_logiPat          = 1
let g:loaded_getscriptPlugin  = 1
let g:loaded_2html_plugin     = 1
let g:loaded_rrhelper         = 1
let g:loaded_spellfile_plugin = 1
let g:no_pdf_maps             = 1
"* Keybindings
" PhD
nno <silent> <Leader>d  :AsyncRun open dict://<cword><CR><CR>
nno          ∏          :e ~/PhD/Survey/Notes/
" Rust
nno          <          i<><C-c>i| " Generics
" Plugins
nno          <C-s>      :CycleColorNext<CR>
" xmap         S          <Plug>(operator-sandwich-add)
nno <expr>   q          &ma?':TComment<CR>':''
vno <expr>   q          &ma?mode()==#'V'?':TComment<CR>':':TCommentInline<CR>':''
nno <silent> +          :Neoformat<CR>
nno <silent> gb         :Gbrowse<CR>
nno          M          <Plug>ToggleMarkbar
nno          <C-p>      :Rg<CR>
nno          <C-u>      :MRU<CR>
xno          <C-r>      :s/ //g<Left><Left>
nm           :          \l
nm  <nowait><buffer> <C-c> <Plug>(VM-Reset)
nno          <C-x>      :Stealth<CR>
nno          Ö          :ArgWrap<CR>
nno          χ          :Calendar<CR>|                    " <M-c>
nno          Å          :Bdelete!<CR>
nno          gh         :GHActivity<CR>
nno          ü          :PlugUpdate<CR>|                  " <M-u>
nno          <C-H>      :SidewaysLeft<CR>
nno          <C-L>      :SidewaysRight<CR>
nno          <D-u>      :UndotreeToggle<CR>
nno          λ          :NextColorScheme<CR>|             " <M-l>
nno          η          :PrevColorScheme<CR>|             " <M-h>
nno          •          :TableModeToggle<CR>|             " <M-q>
nno          t          :ALEGoToDefinition<CR>zz
nno          ö          :call ToggleDrawIt()<CR>
nno          ω          :call ToggleWordMode()<CR>        " <M-w>
nno          d<Tab>     :ThesaurusQueryReplaceCurrentWord<CR>
" nno          <C-a>      :call ZoomNERDTreeFromOtherWindow()<CR>
nno          g.         :SortScalaImports<CR>
xno          T          :Tabularize/
" vm           i          <Plug>SchleppToggleReindent
vm           H          <Plug>SchleppLeft
vm           J          <Plug>SchleppDown
vm           K          <Plug>SchleppUp
vm           L          <Plug>SchleppRight
vm           D          <Plug>SchleppDup
nm <silent>  <C-k>      <Plug>(ale_previous_wrap)zz
nm <silent>  <C-j>      <Plug>(ale_next_wrap)zz
nm           K          <Plug>ManPreGetPage<CR>
no           <C-w>m     :WinResizerStartMove<CR>
map          ;          <Plug>(expand_region_expand)
map          :          <Plug>(expand_region_shrink)
nno          <D-g>      :GitGutterLineHighlightsToggle<CR>
nno          <D-S-g>    :GitGutterFold<CR>
nno          <D-j>      :GitGutterNextHunk<CR>
nno          <D-k>      :GitGutterPrevHunk<CR>
vno          <D-S>      :SortGroup <details>.*<CR>
" Fixes
" ino          \          <Nop>|                            " Terrible
" :set statusline=%<%f%h%m%r%=%b\ 0x%B\ \ %l,%c%V\ %P
nno          <C-q>      q|                                " Record with <C-q>
nno          n          nzz
nno          N          Nzz
no           #          gd|                               " Swap # with *
no           *          #N
nno          R          gR
nno <expr>   <Tab>      col('$') == 1? "i<Tab>" : ">>"
nno          <S-Tab>    <<
vno          <Tab>      >gv
vno          <S-Tab>    <gv
vno <expr>   A          mode()=~'v' ? '$h' : 'A'|         " Fix A
vno          P          "_dp|                             " No yank on paste
vno          p          "_dP
vno          <BS>       <BS>|                             " Fix defaults
nno          <C-c>      <Esc>
nno          <C-w>H     <C-w>H<C-w>x<C-w>l|               " NERDTree compatibility
" cno          <C-c>      <Esc>
" Overrides
" nno          <BS>       <C-^>|                            " Change buffer
nno          B          ^|                                " Go to start of line
nno          E          <C-y>|                            " Scroll up
no           <S-Space>  /|                                " Spacebar
no           <Space>    :
nno          y          vy|                               " Yank char
ino          <C-h>      <Left>|                           " Move in insert mode
ino          <C-j>      <Down>
ino          <C-k>      <Up>
ino          <C-l>      <Right>
no           !          :!
if has("gui_macvim")
	no         <C-d>      <C-w>w|                           " Cycle windows
el
	no         <C-d>      :x<CR>
en
nno          <Right>    <C-w>l|                           " Navigate splits
nno          <Left>     <C-w>h
nno          <Up>       <C-w>k
nno          <Down>     <C-w>j
nno          S          :%s//g<Left><Left>
" xno          S          :s//g<Left><Left>
nno <expr>   C          ':%s/' . @/ . '//g<Left><Left>'
xno <expr>   C          ':s/' . @/ . '//g<Left><Left>'
nno          <C-n>      gt|                           " Tab page management
nno          <C-b>      gT|
nno          gt         :tabnew<CR>
nno          <C-CR>     kk<CR>|                           " Reverse <CR>
nno          k          gk
nno          j          gj
nno          <C-f>      vapkJVgqo<Esc>|                   " Reformat paragraph
" Command line
cno          <C-c>      <C-u><C-c>
cno          <C-h>      <Left>
cno          <C-l>      <Right>
cno          <C-k>      <Up>
cno          <C-j>      <Down>
cno          <Up>       <Nop>|                            " Disable arrow keys
cno          <Down>     <Nop>
cno          <Left>     <Nop>
cno          <Right>    <Nop>
cno          <C-b>      <S-Left>
cno          <C-e>      <S-Right>
cno          <C-v>      <C-r><C-l>
cno          <C-f>      <C-\>e
" Toggles / Sliders
nno          <Leader>b  :set ri!<CR>|                     " Write backwards
nno          <Leader>fu :set fu!<CR>|                     " Fullscreen toggle
nno          <Leader>dd :set diff!<CR>|                   " Diff mode
nno          <Leader>g  :set crb! scb!<CR>                " Bind cursor/scroll
nno          Θ          :set wrap!<CR>|                   " <M-O>
" Shortcuts
ino          <C-f>      \
ino          <C-d>      <C-c>A
" nno          <C-s>      :w<CR>
" nno          <D-j>      j<C-e>|                           " Move without scroll
" nno          <D-k>      k<C-y>
vno          <C-y>      ygvr<Space>|                      " Yank & clear
nno          cu         gg=G``|                           " Format file
nno          gl         <C-w>TgT|                         " Move to new tab
" Commands
" nno          <S-D-d>    :ALEDetail<CR>
nno          <Leader>e  :Ix<CR>                           " Upload to pastebin
no           å          :x<CR>
nno          ä          :%s/\s\+$//e<CR>|                 " Remove whitespaces
nno          cd         :cd %:p:h<CR>:Nnn<CR>|            " Change directory
"nno          <C-o>      :reg<CR>|                         " View yanks
nno          <C-o>      :ALEDetail<CR><C-w>j              " Ale Detail"
nno          ˆ          :%s///g<Left><Left>|              " Replace <M-I>
nno          Δ          :put =strftime('[%d-%m-%Y]')<CR>| " Insert date <M-D>
" nno          <C-f>      :let @/ = ""<CR>|                 " Clear matches
" xno          <C-f>      :<BS><BS><BS><BS><BS>let @/ = ""<CR>| " Clear matches
nno          <D-i>      :terminal ++close<CR>|            " Terminal
nno          <D-b>      :!cargo build<CR>                 " Cargo
nno          <D-r>      :!cargo run<CR>
nno          <D-c>      :!cargo clean<CR>
nno          <D-d>      :!cargo doc --open<CR>
nno          <D-f>      :!cargo test<CR>
nno          <D-e>      :!cargo search 
nno          <D-x>      :!cargo check<CR>
nno          <D-z>      :!cargo bench<CR>
" Macros
nno          <D-1>      @1
nno          <D-2>      @2
nno          <D-3>      @3
nno          <D-4>      @4
nno          <D-5>      @5
nno          <D-6>      @6
nno          <D-7>      @7
nno          <D-8>      @8
nno          <D-9>      @9
nno          <D-E>      <C-q>
" File shortcuts
nno          π          :tab drop ~/.vim/plugins.vim<CR>|              " <M-p>
nno          ⊢          :tab drop ~/.vim/vimrc<CR>|                    " <M-ä>
nno          Æ          :tab drop ~/.gvimrc<CR>|                       " <M-Ä>
nno          θ          :tab drop ~/.vim/plugin-conf.vim<CR>|          " <M-o>
nno          ø          :tab drop ~/.vim/bibtex/library.bib<CR>|       " <M-ö>
nno          φ          :AsyncRun open https://www.kth.se/en/kthb<CR>| " <M-v>
nno          β          :AsyncRun open https://scholar.google.se<CR>|  " <M-b>
"* Syntax
hi ColorColumn guibg=lightred
" hi StatusLine guifg=#F5F5F5
hi StatusLineNC guifg=#F5F5F5
"** C
let c_gnu              = 1   " GNU gcc specific items
let c_space_errors     = 1   " trailing white space and spaces before a <Tab>
let c_curly_error      = 1   " highlight a missing }; this forces syncing from the
let c_syntax_for_h     = 1   " for *.h files use C syntax instead of C++ and use objc
let c_comment_strings  = 1   " strings and numbers inside a comment
let c_no_bracket_error = 1   " don't highlight {}; inside [] as errors
let c_no_curly_error   = 1   " don't highlight {}; inside [] and () as errors;
let c_minlines         = 200
"fun! HighlightKeywords_gcc()
  "hi _PRE_PROCESSOR guifg=#f1d200
  "hi _CCOMMENT guifg=#928374 gui=NONE
  "syn match _CCOMMENT /[\*:]/     containedin=.*cComment.*
  "syn match _PRE_PROCESSOR /[A-Z_][A-Z0-9_]\+/ containedin=.*PreCondit.*
  "syn match _PRE_PROCESSOR /[A-Z_][A-Z0-9_]\+/ containedin=.*Macro.*
  "syn match _PRE_PROCESSOR /[A-Z_][A-Z0-9_]\+/ containedin=.*cComment.*
"endfun
"** HTML
let g:html_whole_filler = 1
let g:html_prevent_copy = "fn"
let g:html_pre_wrap = 0
"let g:html_dynamic_folds = 1
"let g:html_no_foldcolumn = 1
"let g:html_hover_unfold = 1
"** Keywords
" TODO DANGER ERROR WARNING Klas Segeljakt <klasseg@kth.se> [2017-10-21 01:26]
fun HighlightKeywords()
  hi _TODO    guibg=#95bc0a guifg=black
  hi _DANGER  guibg=#dd8225 guifg=black
  hi _ERR     guibg=#ea1822 guifg=black
  hi _WARNING guibg=#f1d200 guifg=black gui=underline,italic
  hi _AUTHOR  guifg=#95bc0a gui=italic
  hi _EMAIL   guifg=#95bc0a gui=underline,italic
  hi _DATE    guifg=#1d829e
  hi _COMMENT guifg=#928374 gui=NONE
  syn keyword _TODO    TODO NOTE containedin=.*Comment.*
  syn keyword _DANGER  DANGER    containedin=.*Comment.*
  syn keyword _WARNING WARNING   containedin=.*Comment.*
  syn keyword _ERR     ERROR     containedin=.*Comment.*
  exe "syn keyword _AUTHOR ".g:author." containedin=.*Comment.*"
  syn match _EMAIL /<*[a-zA-Z]\+@[a-zA-Z]\+\.[a-zA-Z]\+>*/ containedin=.*Comment.*
  syn match _DATE /\[[0-9?]\+-[0-9?]\+-[0-9?]\+ [0-9?]\+:[0-9?]\+\]/ containedin=.*Comment.*
endfun
"* Folding
" Fold Expression
fun! MyFoldExpr()
  let line = getline(v:lnum)
  if line =~ '^<details>'
    return ">1"
  elseif line =~ '^</p></details>'
    return "<1"
  el
    return "="
  en
"   let last = matchend(getline(v:lnum), '^.\*\+')
"   if last == -1
"     return "="
"   el
"     return ">".(last-1)
"   en
endfun
fun! FoldText()
  let line = getline(v:foldstart)
  let list = matchlist(line, '^<details><summary>\(.*\)</summary><p>')
  let inner = get(list, 1, "???")
  let stripped = substitute(inner, '<.\{-}>', '', 'g')
  return '# '.stripped
endfun
"* Autocmd
aug Autocommands | au!
  au FileType vim-plug syn match Normal '\v(Ok|Already up to date)\.' conceal
  au BufEnter tex set formatoptions+=w textwidth=83 nowrap
  au BufLeave tex set formatoptions-=w textwidth=0 wrap
  au BufEnter markdown set nonumber
  au BufLeave markdown set number
  au BufReadPost .vimrc set nowrap
  au FocusLost * silent! wall
  au Syntax * match none
  au Syntax vim,c,cpp,rust match ColorColumn /\%121v.*/
  au BufReadPost * silent norm! g`"
  au TabLeave * silent! w
  au StdinReadPre * silent let s:std_in=1
  au VimEnter,BufWinEnter *
    \ if !exists('t:startify_new_tab')
    \ && !exists('t:goyo_master')
    \ && empty(expand('%'))
    \ && empty(&l:buftype)
    \ && &l:modifiable
    \ |   let t:startify_new_tab = 1
    \ |   Startify
    \ | endif
  au BufRead,BufNewFile *.sbt set filetype=scala
  au BufWinEnter * if &previewwindow | wincmd L | en
  au BufNewFile,BufRead *.agda setf agda
aug END
"* Spell correction / Abbreviations
iab    retrun return
iab     pritn print
iab       teh the
iab      liek like
iab  liekwise likewise
iab      moer more
iab  previosu previous
iab      pset pest
"* Cursor fix
if exists('$ITERM_PROFILE')
  if exists('$TMUX')
    let &t_SI = "\<Esc>[3 q"
    let &t_EI = "\<Esc>[0 q"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
end
