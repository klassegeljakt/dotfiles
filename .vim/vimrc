"+----------------------------------------------------------------------------+
"|                  Author: Klas Segeljakt <klasseg@kth.se>                   |
"+----------------------------------------------------------------------------+
"* Load plugins
set nocompatible
set guioptions=
let maplocalleader = '§'
let mapleader      = '§'
call plug#begin('~/.vim/plugged')
source ~/.vim/plugins.vim
call plug#end()
source ~/.vim/private.vim
source ~/.vim/plugin-conf.vim
"* General settings
let g:author = 'Klas Segeljakt'
let g:email = 'klasseg@kth.se'
syntax enable
filetype plugin indent on       " Detect filetypes
colorscheme PaperColor | set background=light
set dict+=~/.vim/dict/basic
if has('gui_macvim')
  set viminfo='100,n~/.vim/viminfo
  set guiheadroom=60
  set maxmemtot=2000000         " Max mem for all buffers combined
  set maxmem=2000000            " Max mem for buffers
  set macthinstrokes            " Tighter font
el
  set viminfo='100,n~/.vim/nviminfo
en
set autoread                    " Automatically read changes
set autowriteall                " Automatically write when changing file
set bufhidden=hide              " Delete buffer when closing window
set cindent                     " Automatic c indentation
set cinkeys-=0#,:               " Comments don't fiddle with indenting
set cinoptions=l1,c0,C0,\0      " Do not indent switch-cases
set concealcursor=              " Conceal only when on a different line
set conceallevel=2              " Replace concealed text with char, if any
set cpoptions-=aA               " Read and write shouldn't set #
set fileformats=unix,mac,dos    " Handle all, but prefer unix
set fileignorecase              " Always do the above
set fillchars=vert:\│           " Borders
set guicursor+=a:blinkon0       " Disable blinking
set scrolloff=0                 " Show at least X lines above/below cursor
set display=lastline            " Show as much as possible of paragraphs
syn sync minlines=256           " Less syntax lagging
set guifont=Fura\ Code\ Regular\ Nerd\ Font\ Complete:h13
set nomodeline                  " Do not detect modeline
set encoding=utf-8
set noswapfile                  " I've had enough of this
set hlsearch                    " Highlight matches of search
set ignorecase                  " Ignore case when searching
set incsearch                   " Highlight pattern while searching
set infercase                   " Adjust completion to match case
set laststatus=2                " Always show statusline
set lazyredraw                  " Do not redraw while executing macros
set linebreak                   " Break by word instead of char
set noshowmode                  " Do not bother showing current mode
set number                      " Row numbers
set pumheight=25                " Only show 25 completion items max
set showcmd                     " Show visual selection
set showfulltag                 " Show full tag when matching from tagfile
set showtabline=2               " Always show tabline
set spelllang=en_us             " We speak American
set splitright                  " Puts splits on right hand side
set tagcase=match               " Case-sensitive tag search
set notitle                     " Do not display title
set titleold=                   " Do not display title
set virtualedit=block           " Select whitespaces
set wildignore=*.class,*.o,*~,*.pyc,.git,*.lock,target,*.out
set wildignorecase              " Ignore case when completing filenames
set wildmenu                    " Tabcompletion for commandline
set wildcharm=<Tab>             " Allow macros to tabcomplete
set matchpairs=(:),{:},[:],<:>,":" " Separators
set shell=/usr/local/bin/zsh    " Shell program
" let &shell='/usr/local/bin/zsh -f'    " Shell program
set shellcmdflag=-c
set emoji                       " Emoji characters are full-width
set autochdir                   " Change directory to file in buffer !WARNING!
set ttyfast                     " Faster
set winminheight=0              " Squeeze win height
set winminwidth=0               " Squeeze win width
set backspace=2                 " Allow backspace over indent,eol,start
set expandtab                   " Expand tabs to spaces
set tabstop=2                   " Number of spaces per tab
set shiftwidth=2                " Number of spaces for each autoindent
set softtabstop=2               " ?
set shiftround                  " Indent to round number of spaces
set preserveindent              " Preserve indent structure
set undofile                    " Use persistent undo
set undodir=~/.vimundo          " Stored here
set undolevels=2000             " Max number of changes that can be undone
set foldmethod=expr             " manual,indent,expr,marker,syntax,diff
set foldnestmax=4
set updatetime=250              " Write to disk after 250 ms
set redrawtime=1000             " timeout for 'hlsearch' and :match highlighting
set terse                       " Shorten messages
set belloff=all                 " STOP IT
"set verbose                    " Lengthen messages
set whichwrap=b,s,h,l           " Allow these keys to move past EOL
set nojoinspaces                " Insert only one space when joining
set shortmess=aoOstTWAIcF
set completeopt=noinsert,menuone,noselect
set formatoptions=rownlj
set maxmempattern=2000000       " Max memory for pattern matching
set nrformats=alpha,octal,hex,bin
"* Disabled plugins
let g:loaded_matchparen       = 1
let g:loaded_matchit          = 1
let g:loaded_tarPlugin        = 1
let g:loaded_tar              = 1
let g:loaded_zipPlugin        = 1
let g:loaded_zip              = 1
let g:loaded_gzip             = 1
let g:loaded_netrw            = 1
let g:loaded_netrwPlugin      = 1
let g:loaded_vimballPlugin    = 1
let g:loaded_vimball          = 1
let g:loaded_logiPat          = 1
let g:loaded_getscriptPlugin  = 1
let g:loaded_2html_plugin     = 1
let g:loaded_rrhelper         = 1
let g:loaded_spellfile_plugin = 1
let g:no_pdf_maps             = 1
"* Keybindings
" PhD
nno <silent> <Leader>d    :AsyncRun open dict://<cword><CR><CR>
nno <silent> ∏            :e ~/PhD/Survey/Notes/
" Plugins
nno <expr>   q            &ma?':TComment<CR>':''
vno <expr>   q            &ma?mode()==#'V'?':TComment<CR>':':TCommentInline<CR>':''
nno <silent> +            :Neoformat<CR>
nno <silent> gb           :Gbrowse<CR>
nno <silent> <C-p>        :Rg<CR>
nno <silent> <C-u>        :History<CR>
nno <silent> <C-s>        :GFiles<CR>
nno <silent> Ö            :ArgWrap<CR>
nno <silent> Å            :Bdelete!<CR>
nno <silent> ü            :PlugUpdate<CR>|                  " <M-u>
nno <silent> <C-H>        :SidewaysLeft<CR>
nno <silent> <C-L>        :SidewaysRight<CR>
nno <silent> <F5>         :UndotreeToggle<CR>
" nno <expr>   <C-o>        ':ALEDetail<CR><C-w> '.(&columns < 160? 'K':'L')
nno <silent> <C-o>        :ALEDetail<CR>
nno <silent> →            :call ToggleDrawIt()<CR>
no  <silent> <C-w>m       :WinResizerStartMove<CR>
xno <silent> <expr> ?     mode()=~'V' ? ':Tabularize' : '?'
nm <nowait><buffer> <C-c> <Plug>(VM-Reset)
nm           <C-x>        <Plug>Stealth
nm           t            <Plug>(coc-definition)
nm           Ω            <Plug>(coc-refactor)|        " <D-w>
nm           É            <Plug>(coc-references)|      " <D-e>
nm           √            <Plug>(coc-rename)|          " <D-r>
nm           Θ            <Plug>(coc-declaration)|     " <D-t>
nm           Ü            <Plug>(coc-type-definition)| " <D-u>
nm           ˆ            <Plug>(coc-implementation)|  " <D-i>
vm           H            <Plug>SchleppLeft
vm           J            <Plug>SchleppDown
vm           K            <Plug>SchleppUp
vm           L            <Plug>SchleppRight
vm           D            <Plug>SchleppDup
nm           <C-k>        <Plug>(ale_previous_wrap)zz
nm           <C-j>        <Plug>(ale_next_wrap)zz
nm           K            <Plug>ManPreGetPage<CR>
map          ;            <Plug>(expand_region_expand)
map          :            <Plug>(expand_region_shrink)
nm           γ            <Plug>(GitGutterLineHighlightsToggle)| " <M-g>
nm           ƒ            <Plug>(GitGutterFold)|                 " <M-f>
nm           ¬            <Plug>(GitGutterNextHunk)|             " <M-j>
nm           º            <Plug>(GitGutterPrevHunk)|             " <M-k>
nm           ö            <Plug>(choosewin)|                     " <C-d>
" nm           <C-e>        <Plug>(SmoothieDownwards)
" nm           E            <Plug>(SmoothieUpwards)
" Fixes
nno          <C-q>        q|                                " Record with <C-q>
nno          n            nzz
nno          N            Nzz
nno          R            gR
nno <expr>   <Tab>        col('$') == 1? 'i<Tab>' : '>>'
nno          <S-Tab>      <<
vno          <Tab>        >gv
vno          <S-Tab>      <gv
vno <expr>   A            mode()=~'v' ? '$h' : 'A'
vno          P            "_dp|                             " No yank on paste
vno          p            "_dP
vno          <BS>         <BS>|                             " Fix defaults
nno          <C-c>        <Esc>
nno          <C-w>H       <C-w>H<C-w>x<C-w>l|               " NERDTree compatibility
" Overrides
nno          D            "Add                              " 
nno          B            ^|                                " Go to start of line
nno          E            <C-y>|                            " Scroll up
no           <Space>      :
ino          <C-h>        <Left>|                           " Move in insert mode
ino          <C-j>        <Down>
ino          <C-k>        <Up>
ino          <C-l>        <Right>
no           !            :!
no           <C-d>        :x<CR>
nno          S            :%s//g<Left><Left>
nno <expr>   C            ':%s/'.@/.'//g<Left><Left>'
xno <expr>   C            ':s/'.@/.'//g<Left><Left>'
nno          <C-n>        gt|                               " Tab page management
nno          <C-b>        gT|
nno          gt           :tabnew<CR>
nno          <C-CR>       kk<CR>|                           " Reverse <CR>
nno          k            gk
nno          j            gj
nno          <C-f>        vapkJVgqo<Esc>|                   " Reformat paragraph
" Disabled
cno          <Up>         <Nop>
cno          <Down>       <Nop>
cno          <Left>       <Nop>
cno          <Right>      <Nop>
nno          <Right>      i<Right>
nno          <Left>       i<Left>
nno          <Up>         i<Up>
nno          <Down>       i<Down>
" Command line
cno          <C-c>        <C-u><C-c>
cno          <C-h>        <Left>
cno          <C-l>        <Right>
cno          <C-k>        <Up>
cno          <C-j>        <Down>
cno          <C-b>        <S-Left>
cno          <C-e>        <S-Right>
cno          <C-v>        <C-r><C-l>
cno          <C-f>        <C-\>e
" Toggles / Sliders
nno <silent> <Leader>b    :set ri!<CR>|                     " Write backwards
nno <silent> <Leader>dd   :set diff!<CR>|                   " Diff mode
nno <silent> <Leader>l    :set cursorbind! scrollbind!<CR>  " Bind cursor/scroll
nno <silent> Θ            :set wrap!<CR>|                   " <M-O>
" Shortcuts
ino          <C-z>        \                                 " <C-f>
vno          <C-y>        ygvr<Space>|                      " Yank & clear
nno          cu           gg=G``|                           " Format file
nno          gl           <C-w>TgT|                         " Move to new tab
" Commands
nno <silent> å            :x<CR>
nno <silent> ä            :%s/\s\+$//e<CR>|                 " Remove whitespaces
nno <silent> cd           :cd %:p:h<CR>:Nnn<CR>|            " Change directory
nno <silent> <D-i>        :terminal ++close<CR>|            " Terminal
nno <silent> <D-b>        :!cargo build<CR>                 " Cargo
nno <silent> <D-r>        :!cargo run<CR>
nno <silent> <D-c>        :!cargo clean<CR>
nno <silent> <D-d>        :!cargo doc --open<CR>
nno <silent> <D-f>        :!cargo test<CR>
nno <silent> <D-e>        :!cargo search 
nno <silent> <D-x>        :!cargo check<CR>
nno <silent> <D-z>        :!cargo bench<CR>
" Macros
nno          ®            <C-q>|                            " <M-r>
nno          ©            @1|                               " <M-1>
" File shortcuts
nno <silent> π            :tab drop ~/.vim/plugins.vim<CR>|              " <M-p>
nno <silent> ⊢            :tab drop ~/.vim/vimrc<CR>|                    " <M-ä>
nno <silent> Æ            :tab drop ~/.gvimrc<CR>|                       " <M-Ä>
nno <silent> θ            :tab drop ~/.vim/plugin-conf.vim<CR>|          " <M-o>
nno <silent> ø            :tab drop ~/.vim/bibtex/library.bib<CR>|       " <M-ö>
nno <silent> φ            :AsyncRun open https://www.kth.se/en/kthb<CR>| " <M-v>
nno <silent> β            :AsyncRun open https://scholar.google.se<CR>|  " <M-b>
"* Syntax
hi ColorColumn ctermfg=Red guibg=lightred
" hi StatusLine gctermfg= uifg=#F5F5F5
" hi StatusLineNC ctermfg=1 guifg=#F5F5F5
" "** Keywords
" " TODO DANGER ERROR WARNING Klas Segeljakt <klasseg@kth.se> [2017-10-21 01:26]
" hi _TODO    ctermfg=grey guibg=#95bc0a guifg=black
" hi _DANGER  ctermfg=grey guibg=#dd8225 guifg=black
" hi _ERR     ctermfg=grey guibg=#ea1822 guifg=black
" hi _WARNING ctermfg=grey guibg=#f1d200 guifg=black gui=underline,italic
" hi _AUTHOR  ctermfg=grey guifg=#95bc0a gui=italic
" hi _EMAIL   ctermfg=grey guifg=#95bc0a gui=underline,italic
" hi _DATE    ctermfg=grey guifg=#1d829e
" hi _COMMENT ctermfg=grey guifg=#928374 gui=NONE
" syn keyword _TODO    TODO NOTE containedin=.*Comment.*
" syn keyword _DANGER  DANGER    containedin=.*Comment.*
" syn keyword _WARNING WARNING   containedin=.*Comment.*
" syn keyword _ERR     ERROR     containedin=.*Comment.*
" exe 'syn keyword _AUTHOR '.g:author.' containedin=.*Comment.*'
" syn match _EMAIL /<*[a-zA-Z]\+@[a-zA-Z]\+\.[a-zA-Z]\+>*/            containedin=.*Comment.*
" syn match _DATE  /\[[0-9?]\+-[0-9?]\+-[0-9?]\+ [0-9?]\+:[0-9?]\+\]/ containedin=.*Comment.*
"* Autocmd
aug Autocommands | au!
  au BufReadPost .vimrc set nowrap
  au FocusLost * silent! wall
  au Syntax * match none
  au Syntax vim,c,cpp,rust match ColorColumn /\%121v.*/
  au BufReadPost * silent! norm! g`"
  au TabLeave * silent! w
  au StdinReadPre * silent let s:std_in=1
  au VimEnter,BufWinEnter *
    \ if !exists('t:startify_new_tab')
    \ && !exists('t:goyo_master')
    \ && empty(expand('%'))
    \ && empty(&l:buftype)
    \ && &l:modifiable
    \ |   let t:startify_new_tab = 1
    \ |   Startify
    \ | endif
  au BufRead,BufNewFile *.sbt set filetype=scala
  au BufWinEnter * if &previewwindow | wincmd L | en
aug END
"* Spell correction / Abbreviations
iab    retrun return
iab     pritn print
iab       teh the
iab      liek like
iab  liekwise likewise
iab      moer more
iab  previosu previous
iab      pset pest
"* Scripts
" com! Replace 
