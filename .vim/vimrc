"+----------------------------------------------------------------------------+
"|                  Author: Klas Segeljakt <klasseg@kth.se>                   |
"+----------------------------------------------------------------------------+
": Load plugins
set nocp                        " Always do this first
set guioptions=
call plug#begin('~/.vim/plugged')
source ~/.vim/plugins.vim
call plug#end()
source ~/.vim/private.vim
source ~/.vim/plugin-conf.vim
": General settings
let mapleader = "§"
let g:author = "Klas Segeljakt"
let g:email = "klasseg@kth.se"
syntax enable
filetype plugin indent on       " Detect filetypes
" colorscheme gruvbox | set background=dark
colorscheme PaperColor | set background=light
set dict+=~/.vim/dict/basic
set viminfo='100,n~/.vim/viminfo
set autoread                    " Automatically read changes
set autowriteall                " Automatically write when changing file
set bufhidden=hide              " Delete buffer when closing window
set cindent                     " Automatic c indentation
set cinkeys-=0#,:               " Comments don't fiddle with indenting
set cinoptions=l1,c0,C0,\0      " Do not indent switch-cases
set concealcursor=              " Conceal only when on a different line
set conceallevel=2              " Replace concealed text with char, if any
set cpoptions-=aA               " Read and write shouldn't set #
set fileformats=unix,mac,dos    " Handle all, but prefer unix
set fileignorecase              " Always do the above
set fillchars=vert:\│           " Borders
set foldclose="all"             " Autoclose folds
set guicursor+=a:blinkon0       " Disable blinking
set display=lastline            " Show as much as possible of paragraphs
" set guifont=Roboto\ Mono\ Nerd\ Font\ Complete:h13
" set cursorline
" set relativenumber
syntax sync minlines=256
set guifont=Fura\ Code\ Regular\ Nerd\ Font\ Complete:h13
set nomodeline                  " Do not detect modeline
set encoding=utf-8
"set directory^=$HOME/.vim/swapfiles// " Centralize swapfiles
"set updatecount=10000          " Number of chars before flush
set noswapfile                  " I've had enough of this
set hlsearch                    " Highlight matches of search
set ignorecase                  " Ignore case when searching
set incsearch                   " Highlight pattern while searching
set infercase                   " Adjust completion to match case
set laststatus=2                " Always show statusline
set lazyredraw                  " Do not redraw while executing macros
set linebreak                   " Break by word instead of char
set macthinstrokes              " Tighter font
set noshowmode                  " Do not bother showing current mode
set number                      " Row numbers
set pumheight=25                " Only show 5 completion items max
set showcmd                     " Show visual selection
set showfulltag                 " Show full tag when matching from tagfile
set showtabline=2               " Always show tabline
set spelllang=en_us             " We speak American
set splitright                  " Puts splits on right hand side
set tagcase=match               " Case-sensitive tag search
set notitle                     " Do not display title
set titleold=                   " Do not display title
set virtualedit=block           " Select whitespaces
set wildignore=*.class,*.o,*~,*.pyc,.git,*.lock,target,*.out
set wildignorecase              " Ignore case when completing filenames
set wildmenu                    " Tabcompletion for commandline
set wildcharm=<Tab>             " Allow macros to tabcomplete
set matchpairs=(:),{:},[:],<:>,":" " Separators
set shell=/usr/local/bin/zsh    " Shell program
" let &shellcmdflag="-f -c"
set emoji                       " Emoji characters are full-width
set preserveindent              " Preserve indent structure
"set autochdir                   " Change directory to file in buffer ERROR: bugs other stuff
set maxmempattern=2000000       " More memory for pattern matching
set maxmem=2000000              " Max mem for buffers
set maxmemtot=2000000           " Max mem for all buffers combined
set ttyfast                     " Faster
set winminheight=0              " Squeeze win height
set winminwidth=0               " Squeeze win width
set backspace=2                 " Allow backspace over indent,eol,start
set expandtab                   " Expand tabs to spaces
set tabstop=2                   " Number of spaces per tab
set shiftwidth=2                " Number of spaces for each autoindent
set softtabstop=2               " ?
set shiftround                  " Indent to round number of spaces
set undofile                    " Use persistent undo
set undodir=~/.vimundo          " Stored here
set undolevels=2000             " Max number of changes that can be undone
set ruler                       " Show line and column number
set guiheadroom=60
set foldmethod=expr             " manual,indent,expr,marker,syntax,diff
set foldexpr=MyFoldExpr()       " Custom folding expression
set updatetime=250              " Write to disk after 250 ms
set redrawtime=1000             " timeout for 'hlsearch' and :match highlighting
set terse                       " Shorten messages
set belloff=all                 " STOP IT
"set verbose                     " Lengthen messages
set whichwrap=b,s,h,l           " Allow these to move past EOL
set nojoinspaces                " Insert only one space when joining
set shortmess=aoOstTWAIcF
set formatoptions=rownlj
"::----------- DISABLED ------------
"set guipty                     " Pseudo-pty for shell-commands
"set macligatures               " Ligatures (Laggy)
"set makeef=""                  " Quickfix file from make
"set pdev="HP Deskjet"
"set wildmode=list:longest,full " Match
"set guifont=mplus\ Nerd\ Font:h10
"set guifont=Menlo\ Regular\ for\ Powerline\ Nerd\ Font\ Complete:h10
"set guifont=Inconsolata\ Nerd\ Font:h10
"set guifont=Knack\ Nerd\ Font:h10
"set guifont=\monofur\ for\ Powerline:h10
"set scrolloff=2                " Show at least 2 lines above cursor
"set scrolljump=5               " Number of lines to scroll when off-screen
"set showmatch                  " Jump to [{( after entering ]})
"set clipboard=unnamed          " Yank and paste without prefix
"set langmap=li,ko,hn,je,nh,ej,ik,ol,LI,KO,JE,EJ,IK,OL
"set macmeta                     " <Alt> => <M> (BUGGY)
" o: Comment on o
" w: Trailing whitespace = Same
" n: Recognize numbered lists
" l: Do not break long lines
" j: Remove comment when joining lines
": Disabled plugins
let g:loaded_matchparen       = 1
let g:loaded_matchit          = 1
let g:loaded_tarPlugin        = 1
let g:loaded_tar              = 1
let g:loaded_zipPlugin        = 1
let g:loaded_zip              = 1
let g:loaded_gzip             = 1
let g:loaded_netrw            = 1
let g:loaded_netrwPlugin      = 1
let g:loaded_vimballPlugin    = 1
let g:loaded_vimball          = 1
let g:loaded_logiPat          = 1
let g:loaded_getscriptPlugin  = 1
let g:loaded_2html_plugin     = 1
let g:loaded_rrhelper         = 1
let g:loaded_spellfile_plugin = 1
let g:no_pdf_maps             = 1
": Commands
com! Ix :w ![ -z "$1" ] && curl -F 'f:1=<-' ix.io || ix < "$1"; " Pastebin
com! -nargs=1 -complete=help H :h <args> | norm! "\<C-w>L"
": Keybindings
" PhD
nno <silent> <Leader>d  :AsyncRun open dict://<cword><CR><CR>
nno          ∏          :e ~/PhD/Survey/Notes/
" Rust
nno          <          i<><C-c>i| " Generics
" Plugins
nno          <C-s>      :CycleColorNext<CR>
xmap         s          <Plug>VSurround
nno <expr>   q          &ma ? ':TComment<CR>' : ''
vno <expr>   q          &ma ? mode()==#'V' ? ':TComment<CR>' : ':TCommentInline<CR>' : ''
nno <silent> +          :Neoformat<CR>
nno <silent> gb         :Gbrowse<CR>
nno          M          <Plug>ToggleMarkbar
nno          <C-p>      :Rg<CR>
nno          <C-u>      :MRU<CR>
xno          <C-r>      :s/ //g<Left><Left>
nmap         :          \l
nno          <C-x>      :Stealth<CR>
nno          Ö          :ArgWrap<CR>
nno          ç          :Calendar<CR>|                    " <M-c>
nno          Å          :Bdelete!<CR>
nno          gh         :GHActivity<CR>
nno          ü          :PlugUpgrade<CR>|                 " <M-u>
nno          <C-H>      :SidewaysLeft<CR>
nno          <C-L>      :SidewaysRight<CR>
nno          <D-u>      :UndotreeToggle<CR>
nno          ﬁ          :NextColorScheme<CR>|             " <M-l>
nno          ˛          :PrevColorScheme<CR>|             " <M-h>
nno          •          :TableModeToggle<CR>|             " <M-q>
nno          t          :ALEGoToDefinition<CR>zz
nno          ö          :call ToggleDrawIt()<CR>
nno          Ω          :call ToggleWordMode()<CR>        " <M-w>
nno          d<Tab>     :ThesaurusQueryReplaceCurrentWord<CR>
nno          <C-a>      :call ZoomNERDTreeFromOtherWindow()<CR>
nno          g.         :SortScalaImports<CR>
xno          T          :Tabularize/
vm           i          <Plug>SchleppToggleReindent
vm           H          <Plug>SchleppLeft
vm           J          <Plug>SchleppDown
vm           K          <Plug>SchleppUp
vm           L          <Plug>SchleppRight
vm           D          <Plug>SchleppDup
"map <silent>  <C-q>     <Plug>NERDCommenterAppend
"map <silent>  q         <Plug>NERDCommenterToggle
nm <silent>  <C-k>      <Plug>(ale_previous_wrap)zz
nm <silent>  <C-j>      <Plug>(ale_next_wrap)zz
nm           K          <Plug>ManPreGetPage<CR>
no           <C-w>m     :WinResizerStartMove<CR>
" no           <C-w>,     :WinResizerStartResize<CR>
" imap         <C-l>      <Plug>(coc-snippets-expand)
nmap         K          <Plug>(expand_region_expand)
nmap         L          <Plug>(expand_region_shrink)
" Fixes
ino          \          <Nop>|                            " Terrible
nno          <C-q>      q|                                " Record with <C-q>
nno          n          nzz
nno          N          Nzz
no           #          gd|                               " Swap # with *
no           *          #N
nno          R          gR
nno <expr>   <Tab>      col('$') == 1? "i<Tab>" : ">>"
nno          <S-Tab>    <<
vno          <Tab>      >gv
vno          <S-Tab>    <gv
vno <expr>   A          mode()=~'v' ? '$h' : 'A'|         " Fix A
vno          P          "_dp|                             " No yank on paste
vno          p          "_dP
vno          <BS>       <BS>|                             " Fix defaults
nno          <C-c>      <Esc>
nno          <C-w>H     <C-w>H<C-w>x<C-w>l|               " NERDTree compatibility
" cno          <C-c>      <Esc>
" Overrides
" nno          <BS>       <C-^>|                            " Change buffer
nno          B          ^|                                " Go to start of line
nno          E          <C-y>|                            " Scroll up
no           <S-Space>  /|                                " Spacebar
no           <Space>    :
nno          y          vy|                               " Yank char
ino          <C-h>      <Left>|                           " Move in insert mode
ino          <C-j>      <Down>
ino          <C-k>      <Up>
ino          <C-l>      <Right>
no           !          :!
no           <C-d>      <C-w>w|                           " Cycle windows
nno          <Right>    <C-w>l|                           " Navigate splits
nno          <Left>     <C-w>h
nno          <Up>       <C-w>k
nno          <Down>     <C-w>j
nno          S          :%s//g<Left><Left>
xno          S          :s//g<Left><Left>
nno <expr>   C          ':%s/' . @/ . '//g<Left><Left>'
xno <expr>   C          ':s/' . @/ . '//g<Left><Left>'
nno          <C-n>      gt|                           " Tab page management
nno          <C-b>      gT|
nno          gt         :tabnew<CR>
nno          <C-CR>     kk<CR>|                           " Reverse <CR>
nno          k          gk
nno          j          gj
nno          <C-f>      vapkJVgqo<Esc>|                   " Reformat paragraph
" Command line
cno          <C-c>      <C-u><C-c>
cno          <C-h>      <Left>
cno          <C-l>      <Right>
cno          <C-k>      <Up>
cno          <C-j>      <Down>
cno          <Up>       <Nop>|                            " Disable arrow keys
cno          <Down>     <Nop>
cno          <Left>     <Nop>
cno          <Right>    <Nop>
cno          <C-b>      <S-Left>
cno          <C-e>      <S-Right>
cno          <C-v>      <C-r><C-l>
cno          <C-f>      <C-\>e
"fun Accept()
"  let pos = getcmdpos()-2
"  let line = getcmdline()
"  if line[pos] == '/'
"    let a = line[0:pos]
"    let b = substitute(a, "\\\ ", ";", "g")
"    let c = split(b)[-1]
"    let d = substitute(c, ";", " ", "g")
"    if empty(getcompletion(d, "file"))
"      return b
"    else
"      return " \<BS>\<Tab>"
"    endif
"  else
"    return "\<CR>"
"  endif
"endfun
" cno <expr>   <CR>       Accept()
" Toggles / Sliders
nno          <Leader>b  :set ri!<CR>|                     " Write backwards
nno          <Leader>fu :set fu!<CR>|                     " Fullscreen toggle
nno          <Leader>dd :set diff!<CR>|                   " Diff mode
nno          <Leader>g  :set crb! scb!<CR>                " Bind cursor/scroll
nno          Œ          :set wrap!<CR>|                   " <M-O>
" Shortcuts
ino          <C-f>      \
ino          <C-d>      <C-c>A
" nno          <C-s>      :w<CR>
nno          <D-j>      j<C-e>|                           " Move without scroll
nno          <D-k>      k<C-y>
vno          <C-y>      ygvr<Space>|                      " Yank & clear
nno          cu         gg=G``|                           " Format file
nno          gl         <C-w>TgT|                         " Move to new tab
" Commands
nno          <Leader>e  :Ix<CR>                           " Upload to pastebin
no           å          :x<CR>
nno          ä          :%s/\s\+$//e<CR>|                 " Remove whitespaces
nno          cd         :cd %:p:h<CR>:Nnn<CR>|            " Change directory
"nno          <C-o>      :reg<CR>|                         " View yanks
nno          <C-o>      :ALEDetail<CR><C-w>j              " Ale Detail"
nno          ˆ          :%s///g<Left><Left>|              " Replace <M-S-i>
nno          ∆          :put =strftime('[%d-%m-%Y]')<CR>| " Insert date <M-S-d>
" nno          <C-f>      :let @/ = ""<CR>|                 " Clear matches
" xno          <C-f>      :<BS><BS><BS><BS><BS>let @/ = ""<CR>| " Clear matches
nno          <D-i>      :terminal ++close<CR>|            " Terminal
nno          <D-b>      :!cargo build<CR>                 " Cargo
nno          <D-r>      :!cargo run<CR>
nno          <D-c>      :!cargo clean<CR>
nno          <D-d>      :!cargo doc --open<CR>
nno          <D-f>      :!cargo test<CR>
nno          <D-e>      :!cargo search 
nno          <D-x>      :!cargo check<CR>
nno          <D-z>      :!cargo bench<CR>
" File shortcuts
nno          π          :tab drop ~/.vim/plugins.vim<CR>|              " <M-p>
nno          æ          :tab drop ~/.vim/vimrc<CR>|                    " <M-ä>
nno          Æ          :tab drop ~/.gvimrc<CR>|                       " <M-Ä>
nno          œ          :tab drop ~/.vim/plugin-conf.vim<CR>|          " <M-o>
nno          ø          :tab drop ~/.vim/bibtex/library.bib<CR>|       " <M-ö>
nno          ›          :AsyncRun open https://www.kth.se/en/kthb<CR>| " <M-v>
nno          ‹          :AsyncRun open https://scholar.google.se<CR>|  " <M-b>
": Syntax
hi ColorColumn guibg=lightred
" hi StatusLine guifg=#F5F5F5
hi StatusLineNC guifg=#F5F5F5
":: C
let c_gnu = 1              " GNU gcc specific items
let c_space_errors = 1     " trailing white space and spaces before a <Tab>
let c_curly_error = 1      " highlight a missing }; this forces syncing from the
let c_syntax_for_h = 1     " for *.h files use C syntax instead of C++ and use objc
let c_comment_strings = 1  " strings and numbers inside a comment
let c_no_bracket_error = 1 " don't highlight {}; inside [] as errors
let c_no_curly_error = 1   " don't highlight {}; inside [] and () as errors;
let c_minlines = 200
"fun! HighlightKeywords_gcc()
  "hi _PRE_PROCESSOR guifg=#f1d200
  "hi _CCOMMENT guifg=#928374 gui=NONE
  "syn match _CCOMMENT /[\*:]/     containedin=.*cComment.*
  "syn match _PRE_PROCESSOR /[A-Z_][A-Z0-9_]\+/ containedin=.*PreCondit.*
  "syn match _PRE_PROCESSOR /[A-Z_][A-Z0-9_]\+/ containedin=.*Macro.*
  "syn match _PRE_PROCESSOR /[A-Z_][A-Z0-9_]\+/ containedin=.*cComment.*
"endfun
":: HTML
let g:html_whole_filler = 1
let g:html_prevent_copy = "fn"
let g:html_pre_wrap = 0
"let g:html_dynamic_folds = 1
"let g:html_no_foldcolumn = 1
"let g:html_hover_unfold = 1
":: Keywords
" TODO DANGER ERROR WARNING Klas Segeljakt <klasseg@kth.se> [2017-10-21 01:26]
fun HighlightKeywords()
  hi _TODO    guibg=#95bc0a guifg=black
  hi _DANGER  guibg=#dd8225 guifg=black
  hi _ERR     guibg=#ea1822 guifg=black
  hi _WARNING guibg=#f1d200 guifg=black gui=underline,italic
  hi _AUTHOR  guifg=#95bc0a gui=italic
  hi _EMAIL   guifg=#95bc0a gui=underline,italic
  hi _DATE    guifg=#1d829e
  hi _COMMENT guifg=#928374 gui=NONE
  syn keyword _TODO    TODO NOTE containedin=.*Comment.*
  syn keyword _DANGER  DANGER    containedin=.*Comment.*
  syn keyword _WARNING WARNING   containedin=.*Comment.*
  syn keyword _ERR     ERROR     containedin=.*Comment.*
  exe "syn keyword _AUTHOR ".g:author." containedin=.*Comment.*"
  syn match _EMAIL /<*[a-zA-Z]\+@[a-zA-Z]\+\.[a-zA-Z]\+>*/ containedin=.*Comment.*
  syn match _DATE /\[[0-9?]\+-[0-9?]\+-[0-9?]\+ [0-9?]\+:[0-9?]\+\]/ containedin=.*Comment.*
endfun
"   au Syntax * call HighlightKeywords()
": Templates
":: C
fun! NewTemplate_c(...) " C template
  exe "0read ~/.vim/templates/template_c"
  let l:filename = expand('%:t')
  let l:extension = expand('%:e')
  let l:author_email = g:author." <".g:email.">"
  let l:date=strftime("[%Y-%m-%d %H:%M]")
  " Filename+Author+Date
  undojoin | exe "2s/_".repeat(" ", strlen(l:filename)-1)."/".l:filename."/"
  undojoin | exe "3s/_".repeat(" ", strlen(l:author_email)-1)."/".l:author_email."/"
  undojoin | exe "4s/\\[.*\\]/".l:date."/"
  " File specifics
  if a:0 != 1
    if l:extension == "h" " Header
      let l:FILENAME=substitute(toupper(l:filename), '\.', '_', 0)
      undojoin | call append(7,  "#ifndef ".l:FILENAME)
      undojoin | call append(8,  "#define ".l:FILENAME)
      undojoin | call append(9,  '/'.repeat('*', 77).'/')
      undojoin | call append(10,  '')
      undojoin | call append(11, '/'.repeat('*', 77).'/')
      undojoin | call append(12, "#endif /* ".l:FILENAME." */")
      normal Gddgg10j
    endif
  endif
endfun
fun! UpdateTemplate_gcc() " C template
  undojoin | exe "5s/\\[.*\\]/".strftime("[%Y-%m-%d %H:%M]")."/"
endfun
fun! HasTemplate_gcc() " C template
  return !(line('$') == 1 && getline(1) == '')
endfun
":: Vim
fun! NewTemplate_vim(...) " Vim template
  exe "0read ~/.vim/templates/template_vim"
  let l:filename = expand('%:t')
  let l:author_email = g:author." <".g:email.">"
  let l:date=strftime("[%Y-%m-%d %H:%M]")
  undojoin | exe "2s/-".repeat(" ", strlen(l:filename)-1)."/".l:filename."/"
  undojoin | exe "3s/-".repeat(" ", strlen(l:author_email)-1)."/".l:author_email."/"
  undojoin | exe "4s/\\[.*\\]/".date."/"
endfun
fun! UpdateTemplate_vim() " Vim template
  undojoin | exe "5s/\\[.*\\]/".strftime("[%Y-%m-%d %H:%M]")."/"
endfun
":: Pandoc
fun! NewTemplate_pandoc(...) " Pandoc template
  exe "0read ~/.vim/templates/template_pandoc"
  let l:date=strftime("[%Y-%m-%d %H:%M]")
  undojoin | exe "%s/<author>/".g:author."/"
  undojoin | exe "%s/<email>/<".g:email.">/"
  undojoin | exe '%s/<created>/"'.l:date.'"/'
endfun
": Folding
" Fold Expression
fun! MyFoldExpr()
  let thisline = getline(v:lnum)
  if     match(thisline, '^.:::') >= 0 | return ">3"
  elseif match(thisline, '^.::')  >= 0 | return ">2"
  elseif match(thisline, '^.:')   >= 0 | return ">1"
  else                                 | return "="
  endif
endfun
": Autocmd
aug Autocommands | au!
  au FileType vim-plug syn match Normal '\v(Ok|Already up to date)\.' conceal
  au BufEnter tex set formatoptions+=w | set textwidth=83 | set nowrap
  au BufLeave tex set formatoptions-=w | set textwidth=0 | set wrap
  au BufReadPost .vimrc set nowrap
  au FocusLost * silent wall
  au Syntax * match none
  au Syntax vim,c,cpp,rust match ColorColumn /\%101v.*/
  au BufReadPost * silent norm! g`"
  au StdinReadPre * silent let s:std_in=1
"   au TabNew * let t:NERDTreeZoomCurrentWindow = winnr()
"   au BufEnter * if winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree() | q | en
  " Formatoptions
"   au BufEnter * setlocal formatoptions=rownlj
  au VimEnter,BufWinEnter *
    \ if !exists('t:startify_new_tab')
    \ && !exists('t:goyo_master')
    \ && empty(expand('%'))
    \ && empty(&l:buftype)
    \ && &l:modifiable
    \ |   let t:startify_new_tab = 1
    \ |   Startify
    \ | endif
  au BufRead,BufNewFile *.sbt set filetype=scala
"   au VimEnter * NERDTreeCWD
"   au VimEnter * wincmd w
"   au BufWinEnter * if !exists("t:NERDTreeBufName") | NERDTreeMirror | en
aug END
": Spell correction / Abbreviations
iab    retrun  return
iab     pritn  print
iab       teh  the
iab      liek  like
iab  liekwise  likewise
iab      moer  more
iab  previosu  previous
iab      pset  pest
": Digraphs
"ino <C-l>0 ₀|ino <C-o>0 ⁰
"ino <C-l>1 ₁|ino <C-o>1 ¹
"ino <C-l>2 ₂|ino <C-o>2 ²
"ino <C-l>3 ₃|ino <C-o>3 ³
"ino <C-l>4 ₄|ino <C-o>4 ⁴
"ino <C-l>5 ₅|ino <C-o>5 ⁵
"ino <C-l>6 ₆|ino <C-o>6 ⁶
"ino <C-l>7 ₇|ino <C-o>7 ⁷
"ino <C-l>8 ₈|ino <C-o>8 ⁸
"ino <C-l>9 ₉|ino <C-o>9 ⁹
"ino <C-l>+ ₊|ino <C-o>+ ⁺
"ino <C-l>- ₋|ino <C-o>- ⁻
"ino <C-l>= ₌|ino <C-o>= ⁼
"ino <C-l>( ₍|ino <C-o>( ⁽
"ino <C-l>) ₎|ino <C-o>) ⁾
"             ino <C-o>~  ̃
"
"ino <C-l>a ₐ|ino <C-o>a ᵃ|ino <C-o>A ᴬ
"ino <C-l>b ₆|ino <C-o>b ᵇ|ino <C-o>B ᴮ
"ino <C-l>c ꜀|ino <C-o>c ᶜ|
"ino <C-l>d ₔ|ino <C-o>d ᵈ|ino <C-o>D ᴰ
"ino <C-l>e ₑ|ino <C-o>e ᵉ|ino <C-o>E ᴱ
"ino <C-l>f բ|ino <C-o>f ᶠ|
"ino <C-l>g ₉|ino <C-o>g ᵍ|ino <C-o>G ᴳ
"ino <C-l>h ₕ|ino <C-o>h ʰ|ino <C-o>H ᴴ
"ino <C-l>i ᵢ|ino <C-o>i ᶦ|ino <C-o>I ᴵ
"ino <C-l>j ⱼ|ino <C-o>j ʲ|ino <C-o>J ᴶ
"ino <C-l>k ₖ|ino <C-o>k ᵏ|ino <C-o>K ᴷ
"ino <C-l>l ₗ|ino <C-o>l ˡ|ino <C-o>L ᴸ
"ino <C-l>m ₘ|ino <C-o>m ᵐ|ino <C-o>M ᴹ
"ino <C-l>n ₙ|ino <C-o>n ⁿ|ino <C-o>N ᴺ
"ino <C-l>o ₒ|ino <C-o>o ᵒ|ino <C-o>O ᴼ
"ino <C-l>p ₚ|ino <C-o>p ᵖ|ino <C-o>P ᴾ
"ino <C-l>r ᵣ|ino <C-o>r ʳ|ino <C-o>R ᴿ
"ino <C-l>s ₛ|ino <C-o>s ˢ|
"ino <C-l>t ₜ|ino <C-o>t ᵗ|ino <C-o>T ᵀ
"ino <C-l>u ᵤ|ino <C-o>u ᵘ|ino <C-o>U ᵁ
"ino <C-l>v ᵥ|ino <C-o>v ᵛ|
"ino <C-l>x ₓ|ino <C-o>x ˣ|
"ino <C-l>y ᵧ|ino <C-o>y ʸ|
"ino <C-l>z ₂|ino <C-o>z ᶻ|
"
"ino <C-o>sn   ∩
"ino <C-o>su   ∪
"ino <C-o>s=(  ⊆
"ino <C-o>s(   ⊂
"ino <C-o>s!(  ⊄
"ino <C-o>s=)  ⊇
"ino <C-o>s)   ⊃
"ino <C-o>s!)  ⊅
"ino <C-o>so   ⊖
"ino <C-o>s-(  ∈
"ino <C-o>s-!( ∉
"ino <C-o>sx   ×
"ino <C-o>s0   Ø
"
"ino <C-o>ga   α|ino <C-o>gA   Α|
"ino <C-o>gb   β|ino <C-o>gB   Β|ino <C-o>g-b  ᵦ|ino <C-o>g+b   ᵝ
"ino <C-o>gg   γ|ino <C-o>gG   Γ|ino <C-o>g-g  ᵧ|ino <C-o>g+g   ᵞ
"ino <C-o>gd   δ|ino <C-o>gD   ∆|                ino <C-o>g+d   ᵟ
"ino <C-o>ge   ε|ino <C-o>gE   Ε|
"ino <C-o>gz   ζ|ino <C-o>gZ   Ζ|
"ino <C-o>gh   η|ino <C-o>gH   Η|
"ino <C-o>gth  θ|ino <C-o>gTH  Θ|                ino <C-o>g+th  ᶿ
"ino <C-o>gi   ι|ino <C-o>gI   Ι|                ino <C-o>g+i   ᶥ
"ino <C-o>gk   κ|ino <C-o>gK   Κ|
"ino <C-o>gl   λ|ino <C-o>gL   Λ|
"ino <C-o>gm   μ|ino <C-o>gM   Μ|
"ino <C-o>gn   ν|ino <C-o>gN   Ν|
"ino <C-o>gx   ξ|ino <C-o>gX   Ξ|
"ino <C-o>gomi ο|ino <C-o>gOMI Ο|
"ino <C-o>gpi  π|ino <C-o>gPI  Π|
"ino <C-o>gr   ρ|ino <C-o>gR   Ρ|ino <C-o>g-r  ᵨ
"ino <C-o>gs   σ|ino <C-o>gS   Σ|
"ino <C-o>gta  τ|ino <C-o>gTA  Τ|
"ino <C-o>gu   υ|ino <C-o>gU   Υ|
"ino <C-o>gph  φ|ino <C-o>gPH  Φ|ino <C-o>g-ph ᵩ|ino <C-o>g+ph  ᵠ
"ino <C-o>gc   χ|ino <C-o>gC   Χ|ino <C-o>g-c  ᵪ|ino <C-o>g+c   ᵡ
"ino <C-o>gps  ψ|ino <C-o>gPS  Ψ|
"ino <C-o>gome ω|ino <C-o>gOME Ω|
"
"ino <C-o>mx   ⊗|
"ino <C-o>mint ∫|
"ino <C-o>md   ∂|
"ino <C-o>mf   ∀|
"ino <C-o>minf ∞|
"
"ino <C-o><= ≤|ino <C-o>>= ≥
"ino <C-o>=< ≼|ino <C-o>=> ≽
"ino <C-o>>> ≻|ino <C-o><< ≺
"
"
"ino <C-o>-> →
"ino <C-o>. ·
"ino <C-o>\|\| ∥
