"+----------------------------------------------------------------------------+
"|                  Author: Klas Segeljakt <klasseg@kth.se>                   |
"+----------------------------------------------------------------------------+
"* Autocmd
aug Autocommands | au!
  au BufReadPost *
        \ if line("'\"") > 1
        \ && line("'\"") <= line("$")
        \ | exe "normal! g'\""
        \ | en
  au BufReadPost .vimrc set nowrap
"   au focusLost * silent! wall
  au Syntax * match none
  au Syntax rust match ColorColumn /\%>120v.\+/
  au Syntax c,cpp,vim match ColorColumn /\%>80v.\+/
  au BufReadPost * silent! norm! g`"
  au TabLeave * silent! w
  au StdinReadPre * silent let s:std_in=1
  au VimEnter,BufWinEnter *
    \ if !exists('t:startify_new_tab')
    \ && !exists('t:goyo_master')
    \ && empty(expand('%'))
    \ && empty(&l:buftype)
    \ && !&previewwindow
    \ && &l:modifiable
    \ |   let t:startify_new_tab = 1
    \ |   Startify
    \ | en
  au BufRead,BufNewFile *.mlir set filetype=mlir syntax=llvm
  au BufRead,BufNewFile *.lalrpop set syntax=rust
  au BufRead,BufNewFile *.sbt set filetype=scala
  au BufRead,BufNewFile *.arc set filetype=arc
  au BufRead,BufNewFile *.tex set filetype=tex
  au BufRead,BufNewFile .psqlrc set filetype=sql
  au BufWinEnter * if &previewwindow | wincmd L | en
  au User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  au CursorHold * silent call CocActionAsync('highlight')
  au BufEnter * silent! lcd %:p:h
aug END
"* Scripts
function! FloatScroll(forward) abort
  let float = coc#util#get_float()
  if !float | return '' | en
  let buf = nvim_win_get_buf(float)
  let buf_height = nvim_buf_line_count(buf)
  let win_height = nvim_win_get_height(float)
  if buf_height < win_height | return '' | en
  let pos = nvim_win_get_cursor(float)
  if a:forward
    if pos[0] == 1
      let pos[0] += 3 * win_height / 4
    elseif pos[0] + win_height / 2 + 1 < buf_height
      let pos[0] += win_height / 2 + 1
    el
      let pos[0] = buf_height
    en
  el
    if pos[0] == buf_height
      let pos[0] -= 3 * win_height / 4
    elseif pos[0] - win_height / 2 + 1  > 1
      let pos[0] -= win_height / 2 + 1
    el
      let pos[0] = 1
    en
  en
  call nvim_win_set_cursor(float, pos)
  return ''
endfunction

" nno <silent><expr> <down> coc#util#has_float() ? FloatScroll(1) : "\<down>"
" nno <silent><expr>  <up>  coc#util#has_float() ? FloatScroll(0) : "\<up>"

fun! CheckBackSpace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfun

fun! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  el
    execute '!' . &keywordprg . " " . expand('<cword>')
  en
endfun

function! SynStack()
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" if &term =~ "xterm"
    " SecureCRT versions prior to 6.1.x do not support 4-digit DECSET
    "     let &t_ti = "\<Esc>[?1049h"
    "     let &t_te = "\<Esc>[?1049l"
    " Use 2-digit DECSET instead
set t_ti="\<Esc>[?47h"
set t_te="\<Esc>[?47l"
" en

fun! SynStack()
  if !exists("*synstack")
    return
  en
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfun

fun! GoBackToRecentBuffer()
  let startName = bufname('%')
  while 1
    exe "normal! \<c-o>"
    let nowName = bufname('%')
    if nowName != startName
      break
    en
  endwhile
endfun
